package com.yuanluesoft.jeaf.workflow.service.spring;

import java.lang.reflect.InvocationTargetException;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;

import com.yuanluesoft.eai.client.EAIClient;
import com.yuanluesoft.eai.client.exception.EAIException;
import com.yuanluesoft.eai.client.model.Workflow;
import com.yuanluesoft.jeaf.base.model.Element;
import com.yuanluesoft.jeaf.database.DatabaseService;
import com.yuanluesoft.jeaf.database.Record;
import com.yuanluesoft.jeaf.directorymanage.pojo.DirectoryPopedom;
import com.yuanluesoft.jeaf.exception.ServiceException;
import com.yuanluesoft.jeaf.logger.Logger;
import com.yuanluesoft.jeaf.security.pojo.RecordPrivilege;
import com.yuanluesoft.jeaf.security.service.RecordControlService;
import com.yuanluesoft.jeaf.sessionmanage.exception.SessionException;
import com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo;
import com.yuanluesoft.jeaf.sessionmanage.service.SessionService;
import com.yuanluesoft.jeaf.timetable.exception.NoTimetableException;
import com.yuanluesoft.jeaf.timetable.services.TimetableService;
import com.yuanluesoft.jeaf.timetable.services.TimetableServiceListener;
import com.yuanluesoft.jeaf.usermanage.pojo.Org;
import com.yuanluesoft.jeaf.usermanage.pojo.Person;
import com.yuanluesoft.jeaf.usermanage.pojo.Role;
import com.yuanluesoft.jeaf.usermanage.service.OrgService;
import com.yuanluesoft.jeaf.usermanage.service.PersonService;
import com.yuanluesoft.jeaf.usermanage.service.RoleService;
import com.yuanluesoft.jeaf.util.DateTimeUtils;
import com.yuanluesoft.jeaf.util.Environment;
import com.yuanluesoft.jeaf.util.ListUtils;
import com.yuanluesoft.jeaf.util.UUIDLongGenerator;
import com.yuanluesoft.jeaf.workflow.callback.WorkflowParticipantCallback;
import com.yuanluesoft.jeaf.workflow.connectionpool.WorkflowConnectionPool;
import com.yuanluesoft.jeaf.workflow.pojo.WorkItemTimeout;
import com.yuanluesoft.jeaf.workflow.pojo.WorkflowData;
import com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService;
import com.yuanluesoft.workflow.client.WorkflowClient;
import com.yuanluesoft.workflow.client.exception.WorkflowException;
import com.yuanluesoft.workflow.client.model.definition.Activity;
import com.yuanluesoft.workflow.client.model.instance.ActivityInstance;
import com.yuanluesoft.workflow.client.model.instance.ApplicationReturn;
import com.yuanluesoft.workflow.client.model.instance.ProcessInstance;
import com.yuanluesoft.workflow.client.model.instance.WorkItem;
import com.yuanluesoft.workflow.client.model.instance.WorkflowInstance;
import com.yuanluesoft.workflow.client.model.resource.Application;
import com.yuanluesoft.workflow.client.model.resource.DataField;
import com.yuanluesoft.workflow.client.model.resource.FormalParameter;
import com.yuanluesoft.workflow.client.model.resource.ProgrammingParticipant;
import com.yuanluesoft.workflow.client.model.runtime.ActivityEntry;
import com.yuanluesoft.workflow.client.model.runtime.ActivityExit;
import com.yuanluesoft.workflow.client.model.runtime.BaseExit;
import com.yuanluesoft.workflow.client.model.runtime.DataFieldValue;
import com.yuanluesoft.workflow.client.model.runtime.DecisionExit;
import com.yuanluesoft.workflow.client.model.runtime.ProcedureExit;
import com.yuanluesoft.workflow.client.model.runtime.SplitExit;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowEntry;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowExit;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowInterface;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowSign;
import com.yuanluesoft.workflow.client.model.user.ParticipantAgent;
import com.yuanluesoft.workflow.client.model.user.ParticipantDepartment;
import com.yuanluesoft.workflow.client.model.user.ParticipantRole;
import com.yuanluesoft.workflow.client.model.user.ProgrammingParticipantDepartment;
import com.yuanluesoft.workflow.client.model.user.ProgrammingParticipantRole;
import com.yuanluesoft.workflow.client.model.user.ProgrammingPerson;
import com.yuanluesoft.workflow.client.model.user.visitor.Visitor;

/**
 * 
 * @author linchuan
 *
 */
public class WorkflowExploitServiceImpl implements WorkflowExploitService, TimetableServiceListener {
	private WorkflowConnectionPool workflowConnectionPool; //工作流连接池
	private DatabaseService databaseService;
	private RecordControlService recordControlService; //记录控制服务
	private PersonService personService;
	private OrgService orgService;
	private RoleService roleService;
	private TimetableService timetableService; //作息时间服务
	private SessionService sessionService; //会话服务
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#listWorkflowEntries(java.lang.String, com.yuanluesoft.jeaf.workflow.service.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List listWorkflowEntries(String applicationName, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		EAIClient eaiClient = (EAIClient)Environment.getService("eaiClient");
		List workflows = null;
		try {
			workflows = eaiClient.listWorkflows(applicationName);
		} 
		catch (EAIException e) {
			Logger.exception(e);
		}
		if(workflows==null || workflows.isEmpty()) {
			return null;
		}
		List workflowEntries = new ArrayList();
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		for(Iterator iterator = workflows.iterator(); iterator.hasNext();) {
			Workflow workflow = (Workflow)iterator.next();
			WorkflowEntry workflowEntry = getWorkflowEntry(workflowClient, workflow.getId(), workflowParticipantCallback, null, sessionInfo);
			if(workflowEntry!=null) {
				workflowEntries.add(workflowEntry);
			}
		}
		return workflowEntries.isEmpty() ? null : workflowEntries;
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#getWorkflowEntry(java.lang.String, com.yuanluesoft.jeaf.workflow.service.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public WorkflowEntry getWorkflowEntry(String workflowDefinitionId, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowDefinitionId==null || workflowDefinitionId.equals("")) {
			return null;
		}
		return getWorkflowEntry(workflowConnectionPool.getWorkflowClient(sessionInfo), workflowDefinitionId, workflowParticipantCallback, workflowData, sessionInfo);
	}
	
	/**
	 * 获取流程入口
	 * @param workflowClient
	 * @param workflowDefinitionId
	 * @param workflowParticipantCallback
	 * @param workflowData
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	private WorkflowEntry getWorkflowEntry(WorkflowClient workflowClient, String workflowDefinitionId, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowDefinitionId==null || workflowDefinitionId.equals("")) {
			return null;
		}
		try {
			WorkflowEntry workflowEntry = workflowConnectionPool.getWorkflowClient(sessionInfo).getWorkflowEntry(workflowDefinitionId);
			if(workflowEntry!=null && workflowEntry.isNeedValidateProgrammingParticipants()) { //需要检查用户是否属于编程决定的办理人
				for(Iterator iterator = workflowEntry.getActivityEntries().iterator(); iterator.hasNext();) {
					ActivityEntry activityEntry = (ActivityEntry)iterator.next();
					if(activityEntry.getProgrammingParticipants()!=null && !activityEntry.getProgrammingParticipants().isEmpty()) {
						boolean isMember = false;
						for(Iterator iteratorParticipant = activityEntry.getProgrammingParticipants().iterator(); workflowParticipantCallback!=null && iteratorParticipant.hasNext();) {
							ProgrammingParticipant programmingParticipant = (ProgrammingParticipant)iteratorParticipant.next();
							if(workflowParticipantCallback.isMemberOfProgrammingParticipants(programmingParticipant.getId(), programmingParticipant.getName(), workflowData, sessionInfo)) {
								isMember = true;
								break;
							}
						}
						if(!isMember) {
							iterator.remove();
						}
					}
				}
				if(workflowEntry.getActivityEntries().isEmpty()) {
					return null;
				}
			}
			return workflowEntry;
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#previewWorkflowInterface(java.lang.String, java.lang.String, boolean, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public WorkflowInterface previewWorkflowInterface(String workflowDefinitionId, String activityDefinitionId, boolean isWorkflowTest, SessionInfo sessionInfo) throws ServiceException {
		try {
			WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
			if(isWorkflowTest) {
				return workflowClient.previewTestWorkflowInterface(workflowDefinitionId, activityDefinitionId);
			}
			else {
				return workflowClient.previewWorkflowInterface(workflowDefinitionId, activityDefinitionId);
			}
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/**
	 * 获取工作流用户界面
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public WorkflowInterface getWorkflowInterface(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		boolean unlocked = false;
		try {
			if(!workflowClient.isLockWorkflowInstance(workflowInstanceId)) {
				try {
					workflowClient.lockWorkflowInstance(workflowInstanceId);
					unlocked = true;
				}
				catch (Exception e) {
					
				}
			}
			return workflowClient.getWorkflowInterface(workflowInstanceId, workItemId);
		} 
		catch(WorkflowException e) {
			//Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		finally {
			if(unlocked) {
				try {
					workflowClient.unlockWorkflowInstance(workflowInstanceId);
				}
				catch (Exception e) {
					Logger.exception(e);
					throw new ServiceException(e.getMessage());
				}
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#createWorkflowInstance(java.lang.String, java.lang.String, boolean, com.yuanluesoft.jeaf.workflowapplication.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public String createWorkflowInstance(String workflowDefinitionId, String activityDefinitionId, boolean isWorkflowTest, WorkflowData workflowData, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		String workflowInstanceId;
		try {
			List programmingVisitors = listWorkflowEntryProgrammingVisitors(workflowClient, workflowDefinitionId, activityDefinitionId, workflowParticipantCallback, workflowData, sessionInfo);
			if(isWorkflowTest) {
				workflowInstanceId = workflowClient.createTestWorkflowInstance(workflowDefinitionId, activityDefinitionId, programmingVisitors);
			}
			else {
				workflowInstanceId = workflowClient.createWorkflowInstance(workflowDefinitionId, activityDefinitionId, programmingVisitors);
			}
		}
		catch(WorkflowException e) {
			throw new ServiceException(e);
		}
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
		return workflowInstanceId;
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#createWorkflowInstanceAndSend(java.lang.String, java.lang.String, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.service.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public String createWorkflowInstanceAndSend(String workflowDefinitionId, String activityDefinitionId, WorkflowData workflowData, WorkflowMessage workflowMessage, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//创建工作流实例
		String workflowInstanceId = null;
		try {
			List programmingVisitors = listWorkflowEntryProgrammingVisitors(workflowClient, workflowDefinitionId, activityDefinitionId, workflowParticipantCallback, workflowData, sessionInfo);
			workflowInstanceId = workflowClient.createWorkflowInstance(workflowDefinitionId, activityDefinitionId, programmingVisitors);
			workflowClient.lockWorkflowInstance(workflowInstanceId);
			//获取工作项
			List workItems = workflowClient.listRunningWorkItems(workflowInstanceId, false);
			WorkItem workItem = (WorkItem)workItems.get(0);
			
			//获取流程出口
			WorkflowExit workflowExit = getWorkflowExit(workflowInstanceId, workItem.getId(), false, workflowData, null, workflowParticipantCallback, sessionInfo);
			
			//获取第一个环节出口
			BaseExit exit = (BaseExit)workflowExit.getExits().get(0);
			if(exit instanceof ActivityExit) {
				ActivityExit activityExit = (ActivityExit)exit;
				activityExit.setAutoSend(true); //设置为自动发送
				activityExit.setSelected(true); //设置为选中
			}
			//完成工作项
			completeWorkItem(workflowInstanceId, workItem.getId(), false, workflowMessage, workflowExit, workflowData, null, workflowParticipantCallback, sessionInfo);
		}
		catch(Exception e) {
			Logger.exception(e);
			try {
				workflowClient.removeWorkflowInstance(workflowInstanceId);
			}
			catch (Exception ex) {
				
			}
			throw new ServiceException(e.getMessage());
		}
		try {
			workflowClient.unlockWorkflowInstance(workflowInstanceId);
		}
		catch (Exception e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		return workflowInstanceId;
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#removeWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void removeWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		try {
			workflowConnectionPool.getWorkflowClient(sessionInfo).removeWorkflowInstance(workflowInstanceId);
			//清理工作项
			if(workflowData!=null) {
				databaseService.deleteRecordsByHql("from WorkItem WorkItem where WorkItem.recordId=" + workflowData.getId());
			}
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#suspendWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void suspendWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			return;
		}
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		try {
			workflowClient.suspendWorkflowInstance(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		synchWorkItems(workflowClient, workflowData, workflowInstanceId);
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#resumeWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void resumeWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			return;
		}
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo); 
		try {
			workflowClient.resumeWorkflowInstance(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		synchWorkItems(workflowClient, workflowData, workflowInstanceId);
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#listRunningWorkItems(java.lang.String, boolean, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List listRunningWorkItems(String workflowInstanceId, boolean selfOnly, SessionInfo sessionInfo) throws ServiceException {
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).listRunningWorkItems(workflowInstanceId, selfOnly);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#completeAction(java.lang.String, java.lang.String, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void completeAction(String workflowInstanceId, String workItemId, String actionName, SessionInfo sessionInfo) throws ServiceException {
		try {
			workflowConnectionPool.getWorkflowClient(sessionInfo).completeAction(workflowInstanceId, workItemId, actionName);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#createWorkflowInstanceViewPassport(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public String createWorkflowInstanceViewPassport(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).createWorkflowInstanceViewPassport(workflowInstanceId);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#lockWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public boolean lockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			return false;
		}
		try {
			workflowConnectionPool.getWorkflowClient(sessionInfo).lockWorkflowInstance(workflowInstanceId);
			return true;
		}
		catch(Exception e) {
			return false;
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#unlockWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void unlockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			throw new ServiceException();
		}
		try {
			workflowConnectionPool.getWorkflowClient(sessionInfo).unlockWorkflowInstance(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#isLockWorkflowInstance(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public boolean isLockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			throw new ServiceException();
		}
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).isLockWorkflowInstance(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#getWorkflowInstanceLockPersonName(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public String getWorkflowInstanceLockPersonName(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		if(workflowInstanceId==null || workflowInstanceId.equals("")) {
			throw new ServiceException();
		}
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).getWorkflowInstanceLockPersonName(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#previewUndoneActions(java.lang.String, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List previewUndoneActions(String workflowDefinitionId, String activityDefinitionId, SessionInfo sessionInfo) throws ServiceException {
		try {
			WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
			return workflowClient.previewUndoneActions(workflowDefinitionId, activityDefinitionId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#listUndoneActions(java.lang.String, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List listUndoneActions(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException {
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).listUndoneActions(workflowInstanceId, workItemId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#getWorkflowExit(java.lang.String, java.lang.String, java.lang.Object, java.lang.String, com.yuanluesoft.jeaf.workflowapplication.callback.WorkflowExitCallback, com.yuanluesoft.jeaf.workflowapplication.callback.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public WorkflowExit getWorkflowExit(String workflowInstanceId, String workItemId, boolean isWorkflowTest, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, approvalResult);
		WorkflowExit workflowExit;
		try {
			workflowExit = workflowClient.getWorkflowExit(workflowInstanceId, workItemId, dataFieldValues);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		if(workflowExit.getExits()==null || workflowExit.getExits().isEmpty()) { //没有流程出口
		    return workflowExit;
		}
		workflowExit = retrieveWorkflowExit(workflowInstanceId, workItemId, isWorkflowTest, workflowExit, dataFieldValues, workflowData, approvalResult, workflowClient, sessionInfo);
		//替换办理人中需要有程序决定的人员
		replaceProgrammingParticipants(workflowExit, workflowParticipantCallback, workflowData, sessionInfo);
		return workflowExit;
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#completeWorkItem(java.lang.String, java.lang.String, boolean, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.workflow.client.model.runtime.WorkflowExit, java.lang.Object, java.lang.String, com.yuanluesoft.jeaf.workflowapplication.callback.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void completeWorkItem(String workflowInstanceId, String workItemId, boolean isWorkflowTest, WorkflowMessage workflowMessage, WorkflowExit workflowExit, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//获取字段值列表
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, approvalResult);
		//调用过程函数
		invokeProcedureApplication(workflowExit, workflowData, workItemId, isWorkflowTest, sessionInfo);
		//替换替换查询人中需要有程序决定的人员
		replaceProgrammingVisitors(workflowExit, workflowParticipantCallback, workflowData, sessionInfo);
		//完成工作项
		WorkflowSign workflowSign;
		try {
			workflowSign = workflowClient.completeWorkItem(workflowInstanceId, workItemId, workflowMessage, dataFieldValues, workflowExit);
		}
		catch (WorkflowException e) {
			throw new ServiceException(e);
		}
		//签名
		sign(workflowData, workflowSign, sessionInfo);
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#getWorkItemAndSend(java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, java.lang.String, com.yuanluesoft.jeaf.workflow.service.WorkflowParticipantCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void getWorkItemAndSend(String workflowInstanceId, WorkflowMessage workflowMessage, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		boolean unlocked = false;
		try {
			if(!workflowClient.isLockWorkflowInstance(workflowInstanceId)) {
				try {
					workflowClient.lockWorkflowInstance(workflowInstanceId);
					unlocked = true;
				}
				catch (Exception e) {
					
				}
			}
	    	List workItems = workflowClient.listRunningWorkItems(workflowInstanceId, true);
	    	if(workItems==null || workItems.isEmpty()) { //没有工作项
	    		throw new ServiceException("no work item exist");
	    	}
    		WorkItem workItem = (WorkItem)workItems.get(0);
    		//获取工作流出口
    		WorkflowExit workflowExit = getWorkflowExit(workflowInstanceId, workItem.getId(), false, workflowData, null, workflowParticipantCallback, sessionInfo);
    		if(workflowExit==null || workflowExit.getExits().isEmpty()) {
    			throw new ServiceException("no exit exist");
    		}
			ActivityExit activityExit = (ActivityExit)workflowExit.getExits().get(0);
			activityExit.setAutoSend(true);
			activityExit.setSelected(true);
			
			//完成工作项
			completeWorkItem(workflowInstanceId, workItem.getId(), false, workflowMessage, workflowExit, workflowData, null, workflowParticipantCallback, sessionInfo);
    	}
		catch(ServiceException e) {
			throw e;
		}
		catch(Exception e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		finally {
			if(unlocked) {
				try {
					workflowClient.unlockWorkflowInstance(workflowInstanceId);
				} 
				catch (Exception e) {
					
				}
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#listReverseActivityInstances(java.lang.String, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List listReverseActivityInstances(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException {
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).listReverseActivityInstances(workflowInstanceId, workItemId);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#reverse(java.lang.String, java.lang.String, boolean, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void reverse(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String reverseActivityInstanceId, WorkflowMessage workflowMessage, WorkflowData workflowData, String reason, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//获取字段值列表
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, null);
		//回退
		try {
			if(reason!=null) {
				workflowClient.writeTransactLog(workflowInstanceId, workItemId, reason);
			}
			workflowClient.reverse(workflowInstanceId, workItemId, reverseActivityInstanceId, workflowMessage, dataFieldValues);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#listWorkflowUndos(java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public List listWorkflowUndos(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException {
		try {
			return workflowConnectionPool.getWorkflowClient(sessionInfo).listWorkflowUndos(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflowapplication.service.WorkflowApplicationService#undo(java.lang.String, java.lang.String, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflowapplication.callback.WorkflowDataFieldCallback, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void undo(String workflowInstanceId, String workflowUndoId, boolean isWorkflowTest, String undoReason, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//获取字段值列表
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, null);
		//取回
		try {
			workflowClient.undo(workflowInstanceId, workflowUndoId, undoReason, workflowMessage, dataFieldValues);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#transmitToPerson(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void transmitToPerson(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String transmitPersonId, String transmitPersonName, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		com.yuanluesoft.jeaf.base.model.user.Person person = new com.yuanluesoft.jeaf.base.model.user.Person();
		person.setId(transmitPersonId);
		person.setName(transmitPersonName);
		transmitWorkItem(workflowInstanceId, workItemId, isWorkflowTest, person, workflowMessage, workflowData, sessionInfo);
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#transmitToDepartment(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void transmitToDepartment(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String departmentId, String departmentName, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		ParticipantDepartment participantDepartment = new ParticipantDepartment();
		participantDepartment.setId(departmentId);
		participantDepartment.setName(departmentName);
		participantDepartment.setPersonIds(personIds);
		participantDepartment.setPersonNames(personNames);
		transmitWorkItem(workflowInstanceId, workItemId, isWorkflowTest, participantDepartment, workflowMessage, workflowData, sessionInfo);
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#transmitToRole(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void transmitToRole(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String roleId, String roleName, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		ParticipantRole participantRole = new ParticipantRole();
		participantRole.setId(roleId);
		participantRole.setName(roleName);
		participantRole.setPersonIds(personIds);
		participantRole.setPersonNames(personNames);
		transmitWorkItem(workflowInstanceId, workItemId, isWorkflowTest, participantRole, workflowMessage, workflowData, sessionInfo);
	}

	/**
	 * 转办
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param transmitParticipant
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	private void transmitWorkItem(String workflowInstanceId, String workItemId, boolean isWorkflowTest, Element transmitParticipant, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//获取字段值列表
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, null);
		//转办
		try {
			workflowClient.transmitWorkItem(workflowInstanceId, workItemId, transmitParticipant, workflowMessage, dataFieldValues);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#addParticipants(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.workflow.pojo.WorkflowData, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void addParticipants(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		//获取字段值列表
		DataFieldValue[] dataFieldValues = retrieveDataFieldValues(workflowClient, workflowInstanceId, workflowData, null);
		//增加办理人
		try {
			workflowClient.addParticipants(workflowInstanceId, workItemId, personIds, personNames, workflowMessage, dataFieldValues);
		} 
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		//同步工作项和访问者
		synchWorkflowServer(workflowClient, workflowInstanceId, workflowData, isWorkflowTest);
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#addVisitor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, char, com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public boolean addVisitor(String workflowInstanceId, String workItemId, String userId,  String userName, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		WorkflowClient workflowClient = workflowConnectionPool.getWorkflowClient(sessionInfo);
		boolean success = false;
		try {
			Record user = getUser(Long.parseLong(userId), 'N');
			if(user instanceof Person) {
				success = workflowClient.addPersonVisitor(workflowInstanceId, workItemId, userId, userName, workflowMessage);
			}
			else if(user instanceof Org) {
				success = workflowClient.addDepartmentVisitor(workflowInstanceId, workItemId, userId, userName, workflowMessage);
			}
			else if(user instanceof Role) {
				success = workflowClient.addRoleVisitor(workflowInstanceId, workItemId, userId, userName, workflowMessage);
			}
		}
		catch(WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		if(success) {
			synchWorkflowVisitors(workflowClient, workflowData, workflowInstanceId);
		}
		return success;
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.service.WorkflowExploitService#writeTransactLog(java.lang.String, java.lang.String, java.lang.String, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public void writeTransactLog(String workflowInstanceId, String workItemId, String logContent, SessionInfo sessionInfo) throws ServiceException {
		try {
			workflowConnectionPool.getWorkflowClient(sessionInfo).writeTransactLog(workflowInstanceId, workItemId, logContent);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
	}
	
	/**
	 * 递归:执行判断函数,重新获取流程出口
	 * @param workflowClient
	 * @param workflowExit
	 * @param dataFieldValues
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	protected WorkflowExit retrieveWorkflowExit(String workflowInstanceId, String workItemId, boolean isWorkflowTest, WorkflowExit workflowExit, DataFieldValue[] dataFieldValues, WorkflowData workflowData, String approvalResult, WorkflowClient workflowClient, SessionInfo sessionInfo) throws ServiceException {
	    if(invokeDecisionApplication(workflowExit, workflowData, workItemId, isWorkflowTest, sessionInfo)) { //执行判断函数
	    	//重新获取流程出口
		    try {
				workflowExit = workflowClient.retrieveWorkflowExit(workflowInstanceId, workItemId, dataFieldValues, workflowExit);
			}
		    catch (WorkflowException e) {
		    	Logger.exception(e);
				throw new ServiceException(e.getMessage());
			}
		    //递归调用
		    workflowExit = retrieveWorkflowExit(workflowInstanceId, workItemId, isWorkflowTest, workflowExit, dataFieldValues, workflowData, approvalResult, workflowClient, sessionInfo);
		}
		return workflowExit;
	}
	
	/**
	 * 执行判断函数
	 * @param workflowExit
	 * @param pojo
	 * @param isWorkflowTest
	 * @param sessionInfo
	 * @return
	 * @throws Exception
	 */
	private boolean invokeDecisionApplication(WorkflowExit workflowExit, WorkflowData workflowData, String workItemId, boolean isWorkflowTest, SessionInfo sessionInfo) throws ServiceException {
	    boolean invoked = false;
		for(Iterator iterator = workflowExit.getExits().iterator(); iterator.hasNext();) {
		    BaseExit exit = (BaseExit)iterator.next();
		    if(exit instanceof DecisionExit) {
		        DecisionExit decisionExit = (DecisionExit)exit;
		        if(decisionExit.getDecisionApplication()!=null &&
		           (decisionExit.getApplicationReturnList()==null || decisionExit.getApplicationReturnList().isEmpty())) {
		            invoked = true;
		            //执行函数
		            decisionExit.setApplicationReturnList(invokeApplication(decisionExit.getDecisionApplication(), workflowData, workItemId, isWorkflowTest, sessionInfo));
		        }
		    }
		    else if(exit instanceof SplitExit) { //并行出口
		        if(invokeDecisionApplication(((SplitExit)exit).getSplitWorkflowExit(), workflowData, workItemId, isWorkflowTest, sessionInfo)) {
		            invoked = true;
		        }
		    }
		}
		return invoked;
	}
	
	/**
	 * 递归:执行过程函数
	 * @param workflowExit
	 * @param pojo
	 * @param isWorkflowTest
	 * @throws Exception
	 */
	protected void invokeProcedureApplication(WorkflowExit workflowExit, WorkflowData workflowData, String workItemId, boolean isWorkflowTest, SessionInfo sessionInfo) throws ServiceException {
	    for(Iterator iterator = workflowExit.getExits().iterator(); iterator.hasNext();) {
		    BaseExit exit = (BaseExit)iterator.next();
		    if(exit.getWorkflowRoutes()!=null) {
		        for(Iterator iteratorRoute = exit.getWorkflowRoutes().iterator(); iteratorRoute.hasNext();) {
		            BaseExit route = (BaseExit)iteratorRoute.next();
		            if(route instanceof ProcedureExit) {
				        ProcedureExit procedureExit = (ProcedureExit)route;
				        if(procedureExit.getProcedureApplication()!=null &&
				           (procedureExit.getApplicationReturnList()==null || procedureExit.getApplicationReturnList().isEmpty())) {
				            //执行函数
				            procedureExit.setApplicationReturnList(invokeApplication(procedureExit.getProcedureApplication(), workflowData, workItemId, isWorkflowTest, sessionInfo));
				        }
				    }
		        }
		    }
		    if(exit instanceof ProcedureExit) {
		        ProcedureExit procedureExit = (ProcedureExit)exit;
		        if(procedureExit.getProcedureApplication()!=null &&
		           (procedureExit.getApplicationReturnList()==null || procedureExit.getApplicationReturnList().isEmpty())) {
		            //执行函数
		            procedureExit.setApplicationReturnList(invokeApplication(procedureExit.getProcedureApplication(), workflowData, workItemId, isWorkflowTest, sessionInfo));
		        }
		    }
		    else if(exit instanceof SplitExit) {
		    	//递归调用
		        invokeProcedureApplication(((SplitExit)exit).getSplitWorkflowExit(), workflowData, workItemId, isWorkflowTest, sessionInfo);
		    }
		}
	}
	
	/**
	 * 调用函数
	 * @param application
	 * @param workflowData
	 * @param workItemId
	 * @param isWorkflowTest
	 * @return
	 * @throws ServiceException
	 */
	protected List invokeApplication(Application application, WorkflowData workflowData, String workItemId, boolean isWorkflowTest, SessionInfo sessionInfo) throws ServiceException {
		if(application==null) {
			return null;
		}
		Object service = Environment.getService(application.getService());
		List parameterList = application.getFormalParameterList();
		if(parameterList==null) {
			try {
				service.getClass().getMethod(application.getFunction(), new Class[] {Object.class}).invoke(service, new Object[] {workflowData});
			}
			catch (Exception e) {
				Logger.exception(e);
				throw new ServiceException();
			}
			return null;
		}
		//TODO:目前不支持INOUT方式,返回值仅支持1个
		List classList = new ArrayList();
		List objectList = new ArrayList();
		for(Iterator iterator = parameterList.iterator(); iterator.hasNext();) {
			FormalParameter formalParameter = (FormalParameter)iterator.next();
			String mode = formalParameter.getMode();
			if("IN".equals(mode)) {
				String type = formalParameter.getType(); //INTEGER/FLOAT/STRING/DATETIME/BOOLEAN
				if("INTEGER".equals(type)) {
					classList.add(int.class);
				}
				else if("LONG".equals(type)) {
					classList.add(long.class);
				}
				else if("FLOAT".equals(type)) {
					classList.add(float.class);
				}
				else if("DATETIME".equals(type)) {
					classList.add(Date.class);
				}
				else if("BOOLEAN".equals(type)) {
					classList.add(boolean.class);
					if("isWorkflowTest".equals(formalParameter.getId())) { //是否测试流程
						objectList.add(new Boolean(isWorkflowTest));
						continue;
					}
				}
				else if("sessionInfo".equals(formalParameter.getId())) {
					classList.add(SessionInfo.class);
					objectList.add(sessionInfo);
					continue;
				}
				else {	
					classList.add(String.class);
					if("workItemId".equals(formalParameter.getId())) { //工作项ID
						objectList.add(new Boolean(isWorkflowTest));
						continue;
					}
				}
				try {
					objectList.add(PropertyUtils.getProperty(workflowData, formalParameter.getId()));
				}
				catch(Exception e) {
					throw new ServiceException();
				}
			}
		}
		Object ret = null;
		try {
			ret = service.getClass().getMethod(application.getFunction(), toClassArray(classList)).invoke(service, objectList.toArray());
		}
		catch(NoSuchMethodException e) {
			classList.add(0, workflowData.getClass());
			objectList.add(0, workflowData);
			try {
			   ret = service.getClass().getMethod(application.getFunction(), toClassArray(classList)).invoke(service, objectList.toArray());
			}
			catch(InvocationTargetException ex) {
				if(ex.getTargetException() instanceof ServiceException) {
					throw (ServiceException)ex.getTargetException();
				}
				throw new ServiceException(ex);
			}
			catch(Exception ex) {
				throw new ServiceException(ex);
			}
		}
		catch(InvocationTargetException ex) {
			if(ex.getTargetException() instanceof ServiceException) {
				throw (ServiceException)ex.getTargetException();
			}
			throw new ServiceException(ex);
		}
		catch(Exception ex) {
			throw new ServiceException(ex);
		}
		List applicationReturns = null;
		if(ret!=null) {
			FormalParameter formalParameter = (FormalParameter)parameterList.get(parameterList.size() - 1);
			if("OUT".equals(formalParameter.getMode())) {
				applicationReturns = new ArrayList();
				ApplicationReturn applicationReturn = new ApplicationReturn();
				applicationReturn.setId(formalParameter.getId());
				applicationReturn.setType(formalParameter.getType());
				applicationReturn.setValue(ret);
				applicationReturns.add(applicationReturn);
			}
		}
		return applicationReturns;
	}
	
	/**
	 * 将类列表转换为类数组
	 * @param classList
	 * @return
	 */
	private Class[] toClassArray(List classList) {
		Class[] classArray = new Class[classList.size()];
		for(int i=0; i<classList.size(); i++) {
			classArray[i] = (Class)classList.get(i);
		}
		return classArray;
	}
	
	/**
	 * 递归函数,替换办理人中需要由程序决定的人员
	 * @param workflowExit
	 * @param pojo
	 * @param sessionInfo
	 * @throws Exception
	 */
	protected void replaceProgrammingParticipants(WorkflowExit workflowExit, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowExit==null) {
			return;
		}
		for(Iterator iterator = workflowExit.getExits().iterator(); iterator.hasNext();) {
			BaseExit exit = (BaseExit)iterator.next();
			if(exit instanceof SplitExit) { //同时开始,更新下一级
				replaceProgrammingParticipants(((SplitExit)exit).getSplitWorkflowExit(), workflowParticipantCallback, workflowData, sessionInfo);
				continue;
			}
			else if(!(exit instanceof ActivityExit)) {
				continue;
			}
			ActivityExit activityExit = (ActivityExit)exit;
			if(workflowParticipantCallback!=null) {
				activityExit.setParticipants(workflowParticipantCallback.resetParticipants(activityExit.getParticipants(), activityExit.isAnyoneParticipate(), workflowData, sessionInfo));
			}
			if(activityExit.getParticipants()==null) { //没有办理人
				continue;
			}
			for(int i=activityExit.getParticipants().size()-1; i>=0; i--) {
				Object participant = activityExit.getParticipants().get(i);
				if(!(participant instanceof ProgrammingParticipant)) { //不是编程决定的办理人
					continue;
				}
				ProgrammingParticipant programmingParticipant = (ProgrammingParticipant)participant;
				activityExit.getParticipants().remove(i); //删除配置项
				List programmingParticipants = workflowParticipantCallback==null ? null : workflowParticipantCallback.listProgrammingParticipants(programmingParticipant.getId(), programmingParticipant.getName(), workflowData, sessionInfo);
				if(programmingParticipants==null || programmingParticipants.isEmpty()) { //没有办理人
					continue;
				}
				//添加办理人到列表
				int insertAt = i;
				for(Iterator iteratorParticipant = programmingParticipants.iterator(); iteratorParticipant.hasNext();) {
					Object user = iteratorParticipant.next();
					Element participantElement = null;
					if(user.getClass().equals(Element.class) || (user instanceof RecordPrivilege)) {
						long userId;
						if(user instanceof RecordPrivilege) {
							userId = ((RecordPrivilege)user).getVisitorId();
						}
						else {
							Element userElement = (Element)user;
							userId = Long.parseLong(userElement.getId());
						}
						Record userRecord = getUser(userId, 'N');
						if(userRecord instanceof Person) { //个人,转换为Person模型
							participantElement = new ProgrammingPerson(userRecord.getId() + "", ((Person)userRecord).getName(), programmingParticipant.getId());
						}
						else if(userRecord instanceof Org) { //部门,转换为部门办理人,允许所有人办理
							participantElement = new ProgrammingParticipantDepartment("" + userRecord.getId(), ((Org)userRecord).getDirectoryName(), programmingParticipant.getId());
						}
						else if(user instanceof RecordPrivilege) {
							Role role = roleService.getRole(userId);
							if(role!=null) { //转换为角色办理人,允许所有人办理
								participantElement = new ProgrammingParticipantRole("" + role.getId(), role.getRoleName(), programmingParticipant.getId());
							}
						}
						else if(userRecord instanceof Role) { //角色,转换为角色办理人,允许所有人办理
							participantElement = new ProgrammingParticipantRole("" + userRecord.getId(), ((Role)userRecord).getRoleName(), programmingParticipant.getId());
						}
					}
					else if(user instanceof Person) { //个人
						Person person = (Person)user;
						participantElement = new ProgrammingPerson(person.getId() + "", person.getName(), programmingParticipant.getId());
					}
					else if(user instanceof Org) { //组织结构
						Org org = (Org)user;
						participantElement = new ProgrammingParticipantDepartment(org.getId() + "", org.getDirectoryName(), programmingParticipant.getId()); //转换为部门办理人,允许所有人办理
					}
					else if(user instanceof Role) { //角色
						Role role = (Role)user;
						participantElement = new ProgrammingParticipantRole(role.getId() + "", role.getRoleName(), programmingParticipant.getId()); //转换为角色办理人,允许所有人办理
					}
					else if(user instanceof com.yuanluesoft.jeaf.base.model.user.Person) { //个人办理人
						com.yuanluesoft.jeaf.base.model.user.Person person = (com.yuanluesoft.jeaf.base.model.user.Person)user;
						participantElement = new ProgrammingPerson(person.getId(), person.getName(), programmingParticipant.getId());
					}
					else if(user instanceof ParticipantDepartment) { //部门办理人
						ParticipantDepartment participantDepartment = (ParticipantDepartment)user;
						ProgrammingParticipantDepartment programmingParticipantDepartment = new ProgrammingParticipantDepartment(participantDepartment.getId(), participantDepartment.getName(), programmingParticipant.getId());
						programmingParticipantDepartment.setPersonIds(participantDepartment.getPersonIds());
						programmingParticipantDepartment.setPersonNames(participantDepartment.getPersonNames());
						participantElement = programmingParticipantDepartment;
					}
					else if(user instanceof ParticipantRole) { //角色办理人
						ParticipantRole participantRole = (ParticipantRole)user;
						ProgrammingParticipantRole programmingParticipantRole = new ProgrammingParticipantRole(participantRole.getId(), participantRole.getName(), programmingParticipant.getId());
						programmingParticipantRole.setPersonIds(participantRole.getPersonIds());
						programmingParticipantRole.setPersonNames(participantRole.getPersonNames());
						participantElement = programmingParticipantRole;
					}
					else if(user instanceof DirectoryPopedom) { //目录权限控制记录
						DirectoryPopedom popedom  = (DirectoryPopedom)user;
						Record userRecord = getUser(popedom.getUserId(), 'N');
						if(userRecord instanceof Person) { //个人
							participantElement = new ProgrammingPerson(userRecord.getId() + "", ((Person)userRecord).getName(), programmingParticipant.getId());
						}
						else if(userRecord instanceof Org) { //部门
							participantElement = new ProgrammingParticipantDepartment(userRecord.getId() + "", ((Org)userRecord).getDirectoryName(), programmingParticipant.getId()); //转换为部门办理人,允许所有人办理
						}
						else if(userRecord instanceof Role) { //角色
							participantElement = new ProgrammingParticipantRole(userRecord.getId() + "", ((Role)userRecord).getRoleName(), programmingParticipant.getId()); //转换为角色办理人,允许所有人办理
						}
					}
					else if((user instanceof ProgrammingPerson) ||
						    (user instanceof ProgrammingParticipantDepartment) ||
						    (user instanceof ProgrammingParticipantRole)) { //已经是编程的办理人
						participantElement = (Element)user;
					}
					if(participantElement==null) {
						continue;
					}
					//检查办理人是否出现过
					int pIndex = activityExit.getParticipants().size() - 1;
					for(;pIndex>=0 && !((Element)activityExit.getParticipants().get(pIndex)).getId().equals(participantElement.getId()); pIndex--);
					if(pIndex>insertAt) { //出现过,且在当前插入位置的后面
						activityExit.getParticipants().remove(pIndex);
						pIndex = -1;
					}
					if(pIndex==-1) {
						activityExit.getParticipants().add(insertAt++, participantElement);
					}
				}
			}
			if(activityExit.getParticipants().size()==1) { //仅一个办理人
				activityExit.setAutoSend(true); //设为自动发送
			}
		}
	}
	
	/**
	 * 递归函数,替换查询人中需要有程序决定的人员
	 * @param workflowExit
	 * @param workflowForm
	 * @param pojo
	 * @param request
	 * @param sessionInfo
	 * @throws Exception
	 */
	protected void replaceProgrammingVisitors(WorkflowExit workflowExit, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		if(workflowExit==null) {
			return;
		}
		for(Iterator iterator = workflowExit.getExits().iterator(); iterator.hasNext();) {
			BaseExit exit = (BaseExit)iterator.next();
			if(exit instanceof SplitExit) { //同时开始,更新下一级
				replaceProgrammingVisitors(((SplitExit)exit).getSplitWorkflowExit(), workflowParticipantCallback, workflowData, sessionInfo);
				continue;
			}
			else if(!(exit instanceof ActivityExit)) {
				continue;
			}
			ActivityExit activityExit = (ActivityExit)exit;
			if(!activityExit.isSelected() || activityExit.getProgrammingVisitors()==null) { //没有选中,或者没有需要程序决定的查询人
				continue;
			}
			for(int i=activityExit.getProgrammingVisitors().size()-1; i>=0; i--) {
				ProgrammingParticipant programmingParticipant = (ProgrammingParticipant)activityExit.getProgrammingVisitors().get(i);
				activityExit.getProgrammingVisitors().remove(i); //删除配置项
				List participants = listProgrammingVisitors(activityExit, programmingParticipant, workflowParticipantCallback, workflowData, sessionInfo);
				//添加查询人到列表
				if(participants!=null && !participants.isEmpty()) {
					activityExit.getProgrammingVisitors().addAll(i, participants);
				}
			}
		}
	}
	
	/**
	 * 获取编程决定的查询人
	 * @param activityExit
	 * @param programmingParticipant
	 * @param workflowParticipantCallback
	 * @param workflowData
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	private List listProgrammingVisitors(ActivityExit activityExit, ProgrammingParticipant programmingParticipant, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		List participants = workflowParticipantCallback.listProgrammingParticipants(programmingParticipant.getId(), programmingParticipant.getName(), workflowData, sessionInfo);
		if(participants==null || participants.isEmpty()) { //没有办理人
			return null;
		}
		//转换用户
		for(int i = participants.size()-1; i>=0; i--) {
			Object user = participants.get(i);
			Element visitorElement = null;
			if(user.getClass().equals(Element.class) || (user instanceof RecordPrivilege)) {
				Element userElement = (Element)user;
				Record userRecord = getUser(Long.parseLong(userElement.getId()), 'N');
				if(userRecord instanceof Person) { //个人,转换为Person模型
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Person("" + userRecord.getId(), ((Person)userRecord).getName());
				}
				else if(userRecord instanceof Org) { //部门,转换为部门办理人,允许所有人办理
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Department("" + userRecord.getId(), ((Org)userRecord).getDirectoryName());
				}
				else if(userRecord instanceof Role) { //角色,转换为角色办理人,允许所有人办理
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Role("" + userRecord.getId(), ((Role)userRecord).getRoleName());
				}
			}
			else if(user instanceof Element) { //已经是工作流用户模型
				continue;
			}
			else if(user instanceof Person) { //个人
				Person person = (Person)user;
				visitorElement = new com.yuanluesoft.jeaf.base.model.user.Person(person.getId() + "", person.getName());
			}
			else if(user instanceof Org) { //组织结构
				Org org = (Org)user;
				visitorElement = new com.yuanluesoft.jeaf.base.model.user.Department(org.getId() + "", org.getDirectoryName()); //转换为部门办理人,允许所有人办理
			}
			else if(user instanceof Role) { //角色
				Role role = (Role)user;
				visitorElement = new com.yuanluesoft.jeaf.base.model.user.Role(role.getId() + "", role.getRoleName()); //转换为角色办理人,允许所有人办理
			}
			else if(user instanceof DirectoryPopedom) { //目录权限控制记录
				DirectoryPopedom popedom  = (DirectoryPopedom)user;
				Record userRecord = getUser(popedom.getUserId(), 'N');
				if(userRecord instanceof Person) { //个人
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Person(userRecord.getId() + "", ((Person)userRecord).getName());
				}
				else if(userRecord instanceof Org) { //部门
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Department(userRecord.getId() + "", ((Org)userRecord).getDirectoryName()); //转换为部门办理人,允许所有人办理
				}
				else if(userRecord instanceof Role) { //角色
					visitorElement = new com.yuanluesoft.jeaf.base.model.user.Role(userRecord.getId() + "", ((Role)userRecord).getRoleName()); //转换为角色办理人,允许所有人办理
				}
			}
			//替换原来的元素
			participants.remove(i);
			if(visitorElement!=null) {
				participants.add(i, visitorElement);
			}
		}
		return participants;
	}
	
	/**
	 * 获取用户
	 * @param userId
	 * @param userType 0/用户,1/部门,2/角色,N/不确定
	 * @return
	 */
	private Record getUser(long userId, char userType) throws ServiceException {
		if(userType=='0') {
			return personService.getPerson(userId);
		}
		if(userType=='1') {
			return orgService.getOrg(userId);
		}
		if(userType=='2') {
			return roleService.getRole(userId);
		}
		Person person = personService.getPerson(userId);
		if(person!=null) { //个人
			return person;
		}
		Org org = orgService.getOrg(userId);
		if(org!=null) { //部门
			return org;
		}
		//角色
		return roleService.getRole(userId);
	}
	
	/**
	 * 获取流程入口需要由编程决定的查询人
	 * @param workflowClient
	 * @param workflowDefinitionId
	 * @param activityDefinitionId
	 * @param workflowParticipantCallback
	 * @param workflowData
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	private List listWorkflowEntryProgrammingVisitors(WorkflowClient workflowClient, String workflowDefinitionId, String activityDefinitionId, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException {
		//获取流程入口
		WorkflowEntry workflowEntry;
		try {
			workflowEntry = workflowClient.getWorkflowEntry(workflowDefinitionId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException();
		}
		ActivityEntry activityEntry = (ActivityEntry)ListUtils.findObjectByProperty(workflowEntry.getActivityEntries(), "id", activityDefinitionId);
		//获取需要由编程决定的查询人
		if(activityEntry.getProgrammingVisitors()==null || activityEntry.getProgrammingVisitors().isEmpty()) {
			return null;
		}
		List programmingVisitors = new ArrayList();
		for(Iterator iterator = activityEntry.getProgrammingVisitors().iterator(); iterator.hasNext();) {
			ProgrammingParticipant programmingParticipant = (ProgrammingParticipant)iterator.next();
			List participants = listProgrammingVisitors(null, programmingParticipant, workflowParticipantCallback, workflowData, sessionInfo);
			if(participants!=null) {
				programmingVisitors.addAll(participants);
			}
		}
		return programmingVisitors;
	}
	
	/**
	 * 获取字段值列表
	 * @param workflowClient
	 * @param workflowInstanceId
	 * @param pojo
	 * @param approvalResult
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	protected DataFieldValue[] retrieveDataFieldValues(WorkflowClient workflowClient, String workflowInstanceId, WorkflowData workflowData, String approvalResult) throws ServiceException {
		List dataFields;
		try {
			dataFields = workflowClient.listDataFields(workflowInstanceId);
		}
		catch (WorkflowException e) {
			Logger.exception(e);
			throw new ServiceException(e.getMessage());
		}
		if(dataFields==null || dataFields.isEmpty()) {
			return null;
		}
		DataFieldValue[] dataFieldValues = new DataFieldValue[dataFields.size()];
		for(int i=0; i<dataFields.size(); i++) {
			DataField dataField = (DataField)dataFields.get(i);
			dataFieldValues[i] = new DataFieldValue();
			dataFieldValues[i].setDataFieldId(dataField.getId());
			if("approvalResult".equals(dataField.getId())) {
				dataFieldValues[i].setDataFieldValue(approvalResult);
			}
			else {
				try {
					dataFieldValues[i].setDataFieldValue(PropertyUtils.getProperty(workflowData, dataField.getId()));
				}
				catch(Exception e) {
					if(!dataField.isSign() && !dataField.isMultiSign()) {
						e.printStackTrace();
					}
				}
			}
		}
		return dataFieldValues;
	}
	
	/**
	 * 从工作流服务器同步工作项和访问者列表,以提高本地处理效率
	 * @param workflowClient
	 * @param workflowInstanceId
	 * @param pojo
	 * @param isWorkflowTest
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	protected void synchWorkflowServer(WorkflowClient workflowClient, String workflowInstanceId, WorkflowData workflowData, boolean isWorkflowTest) throws ServiceException {
	    if(isWorkflowTest) {
	    	return;
	    }
	    //同步工作项
	    synchWorkItems(workflowClient, workflowData, workflowInstanceId);
	    //同步访问者
	    synchWorkflowVisitors(workflowClient, workflowData, workflowInstanceId);
	}
	
	/**
	 * 同步工作项
	 * @param workflowClient
	 * @param recordId
	 * @param workflowInstanceId
	 * @throws ServiceException
	 */
	protected void synchWorkItems(WorkflowClient workflowClient, WorkflowData workflowData, String workflowInstanceId) throws ServiceException {
		List runningWorkItems;
		try {
			runningWorkItems = workflowClient.listRunningWorkItems(workflowInstanceId, false);
		}
		catch(WorkflowException e) {
			throw new ServiceException(e);
		}
		List workItems = databaseService.findRecordsByHql("from WorkItem WorkItem where WorkItem.recordId=" + workflowData.getId());
		boolean notRunning = (runningWorkItems==null || runningWorkItems.isEmpty());
		//删除无效的工作项
		if(workItems!=null) {
			for(Iterator iterator = workItems.iterator(); iterator.hasNext();) {
				com.yuanluesoft.jeaf.workflow.pojo.WorkItem pojoWorkItem = (com.yuanluesoft.jeaf.workflow.pojo.WorkItem)iterator.next();
				if(notRunning || //没有活动工作项
				   ListUtils.findObjectByProperty(runningWorkItems, "id", pojoWorkItem.getWorkItemId())==null) { //或者不在活动工作项列表中
					//保存超时的工作项
					saveTimeoutWorkItem(pojoWorkItem, workflowData);
					//删除工作项记录
					databaseService.deleteRecord(pojoWorkItem);
					iterator.remove();
				}
			}
		}
		//添加新工作项到数据库
		for(Iterator iterator = notRunning ? null : runningWorkItems.iterator(); iterator!=null && iterator.hasNext();) {
			WorkItem workItem = (WorkItem)iterator.next();
			if(ListUtils.findObjectByProperty(workItems, "workItemId", workItem.getId())==null) {
				//办理人
				saveWorkItem(workItem, workItem.getParticipant(), workflowData);
				//代理人
				for(Iterator iteratorAgent = workItem.getAgentList()==null ? null : workItem.getAgentList().iterator(); iteratorAgent!=null && iteratorAgent.hasNext();) {
					saveWorkItem(workItem, (ParticipantAgent)iteratorAgent.next(), workflowData);
				}
			}
		}
	}
	
	/**
	 * 保存超时的工作项
	 * @param pojoWorkItem
	 * @param workflowData
	 * @throws ServiceException
	 */
	private void saveTimeoutWorkItem(com.yuanluesoft.jeaf.workflow.pojo.WorkItem pojoWorkItem, WorkflowData workflowData) throws ServiceException {
		if(pojoWorkItem.getDeadline()<=0) { //没有指定办理时限
			return;
		}
		Timestamp now = DateTimeUtils.now();
		double workDays = 0;
		Record user = getUser(pojoWorkItem.getParticipantId(), pojoWorkItem.getParticipantType());
		try {
			workDays = countWorkDays(user, pojoWorkItem.getCreated(), now);
		}
		catch(Exception e) {
			if(!(e instanceof NoTimetableException)) { //不是没有时间表异常
				Logger.exception(e);
			}
			workDays = (now.getTime()-pojoWorkItem.getCreated().getTime() + 0.0) / (24 * 3600 * 1000.0d);
		}
		if(workDays<=pojoWorkItem.getDeadline()) {
			return;
		}
		WorkItemTimeout workItemTimeout = new WorkItemTimeout();
		try {
			PropertyUtils.copyProperties(workItemTimeout, pojoWorkItem);
		}
		catch (Exception e) {
			
		}
		workItemTimeout.setCompleted(now); //完成时间
		workItemTimeout.setWorkDays(workDays>10000 ? 9999 : Math.round(workDays*100)/100.0); //用时
		workItemTimeout.setTimeout(1); //是否超时
		//设置主记录类名称
		workItemTimeout.setRecordListClassName(workflowData.getClass().getName());
		//设置单位ID
		if(user instanceof Person) {
			workItemTimeout.setUnitId(orgService.getPersonalUnitOrSchool(user.getId()).getId());
		}
		else if(user instanceof Org) {
			workItemTimeout.setUnitId(orgService.getParentUnitOrSchool(user.getId()).getId());
		}
		else if(user instanceof Role) {
			workItemTimeout.setUnitId(orgService.getParentUnitOrSchool(((Role)user).getOrgId()).getId());
		}
		databaseService.saveRecord(workItemTimeout);
	}
	
	/**
	 * 计算工作日
	 * @param participantId
	 * @param beginTime
	 * @param endTime
	 * @return
	 * @throws ServiceException
	 * @throws SessionException
	 */
	private double countWorkDays(Record user, Timestamp beginTime, Timestamp endTime) throws ServiceException, SessionException {
		if(user instanceof Person) { //办理人是用户
			return timetableService.countWorkDays(beginTime, endTime, sessionService.getSessionInfo(((Person)user).getLoginName()));
		}
		if(user instanceof Org) { //部门办理人
			return timetableService.countWorkDays(beginTime, endTime, user.getId());
		}
		if(user instanceof Role) { //角色办理人
			return timetableService.countWorkDays(beginTime, endTime, ((Role)user).getOrgId());
		}
		throw new ServiceException();
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.timetable.services.TimetableServiceListener#onWorkDayChanged(java.sql.Date, java.sql.Date)
	 */
	public void onWorkDayChanged(Date beginDate, Date endDate) throws ServiceException {
		if(beginDate==null) {
			return;
		}
		String hql = "from WorkItemTimeout WorkItemTimeout" +
					 " where WorkItemTimeout.completed>DATE(" + DateTimeUtils.formatDate(beginDate, null) + ")" +
					 (endDate==null ? "" : " and WorkItemTimeout.created<DATE(" + DateTimeUtils.formatDate(DateTimeUtils.add(endDate, Calendar.DAY_OF_MONTH, 1), null) + ")") +
					 " order by WorkItemTimeout.id";
		for(int i=0; ; i+=200) {
			List workItemTimeouts = getDatabaseService().findRecordsByHql(hql, i, 200); //每次处理200条记录
			for(Iterator iterator = workItemTimeouts==null ? null : workItemTimeouts.iterator(); iterator!=null && iterator.hasNext();) {
				WorkItemTimeout workItemTimeout = (WorkItemTimeout)iterator.next();
				try {
					Record user = getUser(workItemTimeout.getParticipantId(), workItemTimeout.getParticipantType());
					double workDays = countWorkDays(user, workItemTimeout.getCreated(), workItemTimeout.getCompleted()); //重新计算工作日
					if(workDays!=workItemTimeout.getWorkDays()) {
						workItemTimeout.setWorkDays(workDays>10000 ? 9999 : Math.round(workDays*100)/100.0); //用时
						workItemTimeout.setTimeout(workDays>workItemTimeout.getDeadline() ? 1 : 0); //是否超时
						getDatabaseService().updateRecord(workItemTimeout);
					}
				}
				catch (Exception e) {
					Logger.exception(e);
				}
			}
			if(workItemTimeouts==null || workItemTimeouts.size()<200) {
				break;
			}
		}
	}

	/**
	 * 保存工作项
	 * @param workItem
	 * @param participant
	 * @param pojo
	 * @throws ServiceException
	 */
	private void saveWorkItem(WorkItem workItem, Element participant, WorkflowData workflowData) throws ServiceException {
		if(participant instanceof ParticipantDepartment) { //部门办理人
			ParticipantDepartment participantDepartment = (ParticipantDepartment)participant;
			if(participantDepartment.getPersonIds()==null) {
				saveWorkItem(workItem, workflowData, '1', participantDepartment.getId(), participantDepartment.getName());
			}
			else {
				String[] ids = participantDepartment.getPersonIds().split(",");
				String[] names = participantDepartment.getPersonNames().split(",");
				for(int i=0; i<ids.length; i++) {
					saveWorkItem(workItem, workflowData, '0', ids[i], names[i]);
				}
			}
		}
		else if(participant instanceof ParticipantRole) { //角色办理人
			ParticipantRole participantRole = (ParticipantRole)participant;
			if(participantRole.getPersonIds()==null) {
				saveWorkItem(workItem, workflowData, '2', participantRole.getId(), participantRole.getName());
			}
			else {
				String[] ids = participantRole.getPersonIds().split(",");
				String[] names = participantRole.getPersonNames().split(",");
				for(int i=0; i<ids.length; i++) {
					saveWorkItem(workItem, workflowData, '0', ids[i], names[i]);
				}
			}
		}
		else { //个人
			saveWorkItem(workItem, workflowData, '0', participant.getId(), participant.getName());
		}
	}
	
	/**
	 * 执行保存工作项
	 * @param workItem
	 * @param recordId
	 * @param participantType
	 * @param participantId
	 * @param participantName
	 * @throws ServiceException
	 */
	private void saveWorkItem(WorkItem workItem, WorkflowData workflowData, char participantType, String participantId, String participantName) throws ServiceException {
		WorkflowInstance workflowInstance = ((ProcessInstance)workItem.getActivityInstance().getProcessInstance()).getWorkflowInstance();
		com.yuanluesoft.jeaf.workflow.pojo.WorkItem pojoWorkItem = new com.yuanluesoft.jeaf.workflow.pojo.WorkItem();
		pojoWorkItem.setId(UUIDLongGenerator.generateId()); //ID
		pojoWorkItem.setWorkItemId(workItem.getId()); //工作项ID
		pojoWorkItem.setWorkflowName(workflowInstance.getWorkflowName()); //工作流名称
		pojoWorkItem.setActivityName(workItem.getActivityInstance().getName()); //环节名称
		pojoWorkItem.setDeadline(((Activity)workItem.getActivityInstance().getActivityDefinition()).getDeadlineCondition()); //办理期限
		pojoWorkItem.setRecordId(workflowData.getId()); //流程数据ID
		pojoWorkItem.setCreated(workItem.getCreated());
		pojoWorkItem.setIsReverse(workItem.isReverse() ? '1' : '0'); //是否被回退
		pojoWorkItem.setIsUndo(workItem.isUndo() ? '1' : '0'); //是否取回
		//上一办理人
		if(workItem.getActivityInstance() instanceof ActivityInstance) {
			ActivityInstance activityInstance = (ActivityInstance)workItem.getActivityInstance();
			if(activityInstance.getPreviousParticipant()!=null) {
				pojoWorkItem.setPreviousParticipantName(activityInstance.getPreviousParticipant().getName());
			}
		}
		//办理人
		pojoWorkItem.setParticipantId(Long.parseLong(participantId));
		pojoWorkItem.setParticipantName(participantName);
		pojoWorkItem.setParticipantType(participantType);
		databaseService.saveRecord(pojoWorkItem);
	}
	
	/**
	 * 同步访问者
	 * @param workflowClient
	 * @param workflowData
	 * @param workflowInstanceId
	 * @throws ServiceException
	 */
	protected void synchWorkflowVisitors(WorkflowClient workflowClient, WorkflowData workflowData, String workflowInstanceId) throws ServiceException {
        List visitors;
        try {
            visitors = workflowClient.listWorkflowInstanceVisitors(workflowInstanceId, DateTimeUtils.add(DateTimeUtils.now(), Calendar.HOUR_OF_DAY, -1));
        }
        catch(WorkflowException e) {
            Logger.exception(e);
            throw new ServiceException();
        }
        if(visitors!=null && !visitors.isEmpty()) {
            for(Iterator iterator = visitors.iterator(); iterator.hasNext();) {
                Visitor visitor = (Visitor)iterator.next();
                recordControlService.appendVisitor(workflowData.getId(), workflowData.getClass().getName(), Long.parseLong(visitor.getId()), RecordControlService.ACCESS_LEVEL_READONLY);
            }
        }
    }
	
	/**
	 * 签名
	 * @param workflowData
	 * @param workflowSign
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	protected void sign(WorkflowData workflowData, WorkflowSign workflowSign, SessionInfo sessionInfo) throws ServiceException {
		if(workflowSign==null || workflowSign.getSignDataFields()==null || workflowSign.getSignDataFields().isEmpty()) { //签名字段为空
			return;
		}
		for(Iterator iterator = workflowSign.getSignDataFields().iterator(); iterator.hasNext();) {
			DataField signField = (DataField)iterator.next();
			try {
				if(signField.isMultiSign()) { //多人签名
					String signPerson = (String)PropertyUtils.getProperty(workflowData, signField.getId() + "Person");
					String signDate = null;
					if(signPerson==null || signPerson.equals("")) {
						signPerson = workflowSign.getSignPersonName();
						signDate = DateTimeUtils.formatTimestamp(DateTimeUtils.now(), null);
					}
					else {
						signPerson += "," + workflowSign.getSignPersonName();
						signDate += "," + DateTimeUtils.formatTimestamp(DateTimeUtils.now(), null);
					}
					PropertyUtils.setProperty(workflowData, signField.getId() + "Person", signPerson);
					PropertyUtils.setProperty(workflowData, signField.getId() + "Date", signDate);
				}
				else { //单一签名
					PropertyUtils.setProperty(workflowData, signField.getId() + "Person", workflowSign.getSignPersonName());
					PropertyUtils.setProperty(workflowData, signField.getId() + "Date", DateTimeUtils.now());
				}
			}
			catch(Exception e) {
				throw new ServiceException();
			}
		}
	}

	/**
	 * @return the workflowConnectionPool
	 */
	public WorkflowConnectionPool getWorkflowConnectionPool() {
		return workflowConnectionPool;
	}

	/**
	 * @param workflowConnectionPool the workflowConnectionPool to set
	 */
	public void setWorkflowConnectionPool(
			WorkflowConnectionPool workflowConnectionPool) {
		this.workflowConnectionPool = workflowConnectionPool;
	}

	/**
	 * @return the databaseService
	 */
	public DatabaseService getDatabaseService() {
		return databaseService;
	}

	/**
	 * @param databaseService the databaseService to set
	 */
	public void setDatabaseService(DatabaseService databaseService) {
		this.databaseService = databaseService;
	}

	/**
	 * @return the recordControlService
	 */
	public RecordControlService getRecordControlService() {
		return recordControlService;
	}

	/**
	 * @param recordControlService the recordControlService to set
	 */
	public void setRecordControlService(RecordControlService recordControlService) {
		this.recordControlService = recordControlService;
	}

	/**
	 * @return the orgService
	 */
	public OrgService getOrgService() {
		return orgService;
	}

	/**
	 * @param orgService the orgService to set
	 */
	public void setOrgService(OrgService orgService) {
		this.orgService = orgService;
	}

	/**
	 * @return the personService
	 */
	public PersonService getPersonService() {
		return personService;
	}

	/**
	 * @param personService the personService to set
	 */
	public void setPersonService(PersonService personService) {
		this.personService = personService;
	}

	/**
	 * @return the roleService
	 */
	public RoleService getRoleService() {
		return roleService;
	}

	/**
	 * @param roleService the roleService to set
	 */
	public void setRoleService(RoleService roleService) {
		this.roleService = roleService;
	}

	/**
	 * @return the timetableService
	 */
	public TimetableService getTimetableService() {
		return timetableService;
	}

	/**
	 * @param timetableService the timetableService to set
	 */
	public void setTimetableService(TimetableService timetableService) {
		this.timetableService = timetableService;
	}

	/**
	 * @return the sessionService
	 */
	public SessionService getSessionService() {
		return sessionService;
	}

	/**
	 * @param sessionService the sessionService to set
	 */
	public void setSessionService(SessionService sessionService) {
		this.sessionService = sessionService;
	}
}