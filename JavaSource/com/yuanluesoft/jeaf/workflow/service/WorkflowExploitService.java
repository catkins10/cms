package com.yuanluesoft.jeaf.workflow.service;

import java.util.List;

import com.yuanluesoft.jeaf.exception.ServiceException;
import com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo;
import com.yuanluesoft.jeaf.workflow.callback.WorkflowParticipantCallback;
import com.yuanluesoft.jeaf.workflow.pojo.WorkflowData;
import com.yuanluesoft.workflow.client.exception.WorkflowException;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowEntry;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowExit;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowInterface;
import com.yuanluesoft.workflow.client.model.runtime.WorkflowMessage;

/**
 * 工作流应用服务
 * @author linchuan
 *
 */
public interface WorkflowExploitService {
	
	/**
	 * 获取流程列表(com.yuanluesoft.workflow.client.model.runtime.WorkflowEntry)
	 * @param applicationName
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List listWorkflowEntries(String applicationName, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取工作流入口
	 * @param workflowDefinitionId
	 * @param workflowParticipantCallback
	 * @param workflowData
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public WorkflowEntry getWorkflowEntry(String workflowDefinitionId, WorkflowParticipantCallback workflowParticipantCallback, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;

	/**
	 * 预览工作流用户界面
	 * @param workflowId
	 * @param activityId
	 * @param isWorkflowTest
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public WorkflowInterface previewWorkflowInterface(String workflowDefinitionId, String activityDefinitionId, boolean isWorkflowTest, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取工作流用户界面
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public WorkflowInterface getWorkflowInterface(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 创建工作流实例,返回流程实例ID
	 * @param workflowDefinitionId
	 * @param activityDefinitionId
	 * @param isWorkflowTest
	 * @param workflowData
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public String createWorkflowInstance(String workflowDefinitionId, String activityDefinitionId, boolean isWorkflowTest, WorkflowData workflowData, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 创建工作流实例并自动发送,返回流程实例ID
	 * @param workflowDefinitionId
	 * @param activityDefinitionId
	 * @param workflowData
	 * @param workflowMessage
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public String createWorkflowInstanceAndSend(String workflowDefinitionId, String activityDefinitionId, WorkflowData workflowData, WorkflowMessage workflowMessage, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;

	/**
	 * 删除工作流实例
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void removeWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 挂起流程实例
	 * @param workflowInstanceId
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void suspendWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 恢复流程实例
	 * @param workflowInstanceId
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void resumeWorkflowInstance(String workflowInstanceId, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取工作项列表
	 * @param workflowInstanceId
	 * @param selfOnly
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List listRunningWorkItems(String workflowInstanceId, boolean selfOnly, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 完成一个操作
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param actionName
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void completeAction(String workflowInstanceId, String workItemId, String actionName, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 解锁工作流实例
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void unlockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 锁定工作流实例
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public boolean lockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 创建工作流实例浏览许可证
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public String createWorkflowInstanceViewPassport(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 检查工作流实例是否被当前用户锁定
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public boolean isLockWorkflowInstance(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取当前锁定工作流实例的用户
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public String getWorkflowInstanceLockPersonName(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 预览用户还需要执行的操作
	 * @param workflowId
	 * @param activityId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List previewUndoneActions(String workflowDefinitionId, String activityDefinitionId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取用户还需要执行的操作
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List listUndoneActions(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException;
		
	/**
	 * 获取工作流出口
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param workflowData
	 * @param approvalResult
	 * @param workflowExitCallback
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public WorkflowExit getWorkflowExit(String workflowInstanceId, String workItemId, boolean isWorkflowTest, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;

	/**
	 * 完成工作项,调用时必须事先锁定流程实例
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param workflowMessage
	 * @param workflowExit
	 * @param workflowData
	 * @param approvalResult
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void completeWorkItem(String workflowInstanceId, String workItemId, boolean isWorkflowTest, WorkflowMessage workflowMessage, WorkflowExit workflowExit, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;

	/**
	 * 获取工作项并自动发送
	 * @param workflowInstanceId
	 * @param workflowMessage
	 * @param workflowData
	 * @param approvalResult
	 * @param workflowParticipantCallback
	 * @param sessionInfo
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void getWorkItemAndSend(String workflowInstanceId, WorkflowMessage workflowMessage, WorkflowData workflowData, String approvalResult, WorkflowParticipantCallback workflowParticipantCallback, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取工作项可回退的环节实例列表
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List listReverseActivityInstances(String workflowInstanceId, String workItemId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 回退
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param reverseActivityInstanceId
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void reverse(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String reverseActivityInstanceId, WorkflowMessage workflowMessage, WorkflowData workflowData, String reason, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 获取流程收回列表
	 * @param workflowInstanceId
	 * @param sessionInfo
	 * @return
	 * @throws ServiceException
	 */
	public List listWorkflowUndos(String workflowInstanceId, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 收回
	 * @param workflowInstanceId
	 * @param workflowUndoId
	 * @param isWorkflowTest
	 * @param undoReason
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void undo(String workflowInstanceId, String workflowUndoId, boolean isWorkflowTest, String undoReason, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 转办:个人
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param transmitPersonId
	 * @param transmitPersonName
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 * @throws WorkflowException
	 */
	public void transmitToPerson(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String transmitPersonId, String transmitPersonName, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 转办:部门
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param departmentId
	 * @param departmentName
	 * @param personIds
	 * @param personNames
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void transmitToDepartment(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String departmentId, String departmentName, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 转办:角色
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param roleId
	 * @param roleName
	 * @param personIds
	 * @param personNames
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void transmitToRole(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String roleId, String roleName, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;

	/**
	 * 增加办理人
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param isWorkflowTest
	 * @param personIds
	 * @param personNames
	 * @param workflowMessage
	 * @param workflowData
	 * @param sessionInfo
	 * @throws ServiceException
	 */
	public void addParticipants(String workflowInstanceId, String workItemId, boolean isWorkflowTest, String personIds, String personNames, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 增加流程实例查询人
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param userId
	 * @param userName
	 * @param userType AccessControlService.VISITOR_TYPE_PERSON/VISITOR_TYPE_DEPARTMENT/VISITOR_TYPE_ROLE
	 * @param workflowMessage
	 * @param sessionInfo
	 * @throws WorkflowException
	 */
	public boolean addVisitor(String workflowInstanceId, String workItemId, String userId, String userName, WorkflowMessage workflowMessage, WorkflowData workflowData, SessionInfo sessionInfo) throws ServiceException;
	
	/**
	 * 添加程序自定义的日志
	 * @param workflowInstanceId
	 * @param workItemId
	 * @param logContent
	 * @param sessionInfo
	 * @throws WorkflowException
	 */
	public void writeTransactLog(String workflowInstanceId, String workItemId, String logContent, SessionInfo sessionInfo) throws ServiceException;
}