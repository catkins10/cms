package com.yuanluesoft.cms.publicservice.actions;

import com.yuanluesoft.cms.publicservice.forms.PublicServiceAdminForm;
import com.yuanluesoft.cms.sitemanage.pojo.WebDirectory;
import com.yuanluesoft.cms.sitemanage.service.SiteService;
import com.yuanluesoft.jeaf.business.service.BusinessService;
import com.yuanluesoft.jeaf.database.Record;
import com.yuanluesoft.jeaf.exception.PrivilegeException;
import com.yuanluesoft.jeaf.form.ActionForm;
import com.yuanluesoft.jeaf.form.model.Form;
import com.yuanluesoft.jeaf.form.model.FormActionList;
import com.yuanluesoft.jeaf.security.service.RecordControlService;
import com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo;
import com.yuanluesoft.jeaf.system.exception.SystemUnregistException;
import com.yuanluesoft.jeaf.workflow.actions.WorkflowAction;
import com.yuanluesoft.jeaf.workflow.form.WorkflowForm;
import com.yuanluesoft.workflow.client.model.runtime.ActivityExit;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public abstract class PublicServiceAdminAction extends WorkflowAction
{
  protected boolean sendSmsAfterCompleted = true;

  protected List getAcl(String applicationName, org.apache.struts.action.ActionForm form, Record record, String openMode, SessionInfo sessionInfo)
    throws Exception
  {
    List acl = super.getAcl(applicationName, form, record, openMode, sessionInfo);

    com.yuanluesoft.cms.publicservice.pojo.PublicService publicService = (com.yuanluesoft.cms.publicservice.pojo.PublicService)record;
    PublicServiceAdminForm publicServiceForm = (PublicServiceAdminForm)form;
    SiteService siteService = (SiteService)getService("siteService");
    if (siteService.checkPopedom(publicService == null ? publicServiceForm.getSiteId() : publicService.getSiteId(), "manager", sessionInfo)) {
      acl.add("site_manager");
    }
	//检查用户是否公开发布人
	if(publicService!=null && publicService.getPublicPersonId()==sessionInfo.getUserId()) {
		acl.add("publish");
	}
    return acl;
  }

  public char checkLoadPrivilege(com.yuanluesoft.jeaf.form.ActionForm form, HttpServletRequest request, Record record, String openMode, List acl, SessionInfo sessionInfo)
    throws PrivilegeException, SystemUnregistException
  {
    if ((acl.contains("application_manager")) || (acl.contains("site_manager"))) {
      return '3';
    }
    com.yuanluesoft.cms.publicservice.pojo.PublicService publicService = (com.yuanluesoft.cms.publicservice.pojo.PublicService)record;
    if (publicService.getIsDeleted() == 1) {
      throw new PrivilegeException();
    }
	if(acl.contains("publish")) { //有发布权限
		return RecordControlService.ACCESS_LEVEL_EDITABLE;
	}
    return super.checkLoadPrivilege(form, request, record, openMode, acl, sessionInfo);
  }

  public void checkDeletePrivilege(com.yuanluesoft.jeaf.form.ActionForm form, HttpServletRequest request, Record record, List acl, SessionInfo sessionInfo)
    throws PrivilegeException, SystemUnregistException
  {
    if ((acl.contains("application_manager")) || (acl.contains("site_manager"))) {
      return;
    }
    super.checkDeletePrivilege(form, request, record, acl, sessionInfo);
  }

  protected List listProgrammingParticipants(ActivityExit activityExit, String programmingParticipantId, String programmingParticipantName, WorkflowForm workflowForm, Record record, HttpServletRequest request, SessionInfo sessionInfo)
    throws Exception
  {
    PublicServiceAdminForm publicServiceAdminForm = (PublicServiceAdminForm)workflowForm;
    SiteService siteService = (SiteService)getService("siteService");
    return "siteEditor".equals(programmingParticipantId) ? siteService.listSiteEditors(publicServiceAdminForm.getSiteId(), false, false, 0) : siteService.listSiteManagers(publicServiceAdminForm.getSiteId(), false, false, 0);
  }

  protected void afterWorkitemCompleted(WorkflowForm workflowForm, boolean workflowInstanceCompleted, boolean isReverse, Record record, String openMode, SessionInfo sessionInfo, HttpServletRequest request)
    throws Exception
  {
    super.afterWorkitemCompleted(workflowForm, workflowInstanceCompleted, isReverse, record, openMode, sessionInfo, request);
    if ((this.sendSmsAfterCompleted) && (workflowInstanceCompleted))
    {
      com.yuanluesoft.cms.publicservice.service.PublicService publicService = (com.yuanluesoft.cms.publicservice.service.PublicService)getService("publicService");
      publicService.sendSmsToCreator(workflowForm.getFormDefine().getApplicationName(), workflowForm.getId());
    }
  }

  public void fillForm(com.yuanluesoft.jeaf.form.ActionForm form, Record record, char accessLevel, SessionInfo sessionInfo, HttpServletRequest request, HttpServletResponse response)
    throws Exception
  {
    super.fillForm(form, record, accessLevel, sessionInfo, request, response);
    SiteService siteService = (SiteService)getService("siteService");
    PublicServiceAdminForm publicServiceAdminForm = (PublicServiceAdminForm)form;

    WebDirectory webDirectory = (WebDirectory)siteService.getDirectory(publicServiceAdminForm.getSiteId());
    publicServiceAdminForm.setSiteName(webDirectory == null ? null : webDirectory.getDirectoryName());

    if (siteService.checkPopedom(publicServiceAdminForm.getSiteId(), "manager", sessionInfo))
      publicServiceAdminForm.setReaders(getRecordControlService().getVisitors(publicServiceAdminForm.getId(), com.yuanluesoft.cms.publicservice.pojo.PublicService.class.getName(), '2'));
  }

  public void loadResource(com.yuanluesoft.jeaf.form.ActionForm form, Record record, List acl, char accessLevel, boolean deleteEnable, String openMode, HttpServletRequest request, SessionInfo sessionInfo)
    throws Exception
  {
    super.loadResource(form, record, acl, accessLevel, deleteEnable, openMode, request, sessionInfo);
    if (record != null) {
      com.yuanluesoft.cms.publicservice.pojo.PublicService publicService = (com.yuanluesoft.cms.publicservice.pojo.PublicService)record;
      if (publicService.getIsDeleted() == 1) {
        form.getFormActions().removeFormAction("删除");
        form.getFormActions().removeFormAction("保存");
        form.setSubForm(form.getSubForm().replace("Edit", "Read"));
      }
      else {
        form.getFormActions().removeFormAction("永久删除");
        form.getFormActions().removeFormAction("撤销删除");
      }
    }
  }

  public void deleteRecord(com.yuanluesoft.jeaf.form.ActionForm form, Form formDefine, Record record, HttpServletRequest request, SessionInfo sessionInfo)
    throws Exception
  {
    if ("true".equals(request.getParameter("physical"))) {
      super.deleteRecord(form, formDefine, record, request, sessionInfo);
    }
    else {
      com.yuanluesoft.cms.publicservice.pojo.PublicService publicService = (com.yuanluesoft.cms.publicservice.pojo.PublicService)record;
      publicService.setIsDeleted(1);
      getBusinessService(formDefine).update(publicService);
    }
  }

  public ActionForward executeUndeleteAction(ActionMapping mapping, org.apache.struts.action.ActionForm form, HttpServletRequest request, HttpServletResponse response)
    throws Exception
  {
    PublicServiceAdminForm publicServiceAdminForm = (PublicServiceAdminForm)form;
    publicServiceAdminForm.setIsDeleted(0);
    return executeSaveAction(mapping, form, request, response, true, null, null, null);
  }

  public ActionForward executeSetPublishOptionAction(boolean isAlwaysPublishAll, ActionMapping mapping, org.apache.struts.action.ActionForm form, HttpServletRequest request, HttpServletResponse response)
    throws Exception
  {
    ActionForward forward = executeSaveAction(mapping, form, request, response, true, null, null, null);
    PublicServiceAdminForm publicServiceAdminForm = (PublicServiceAdminForm)form;
    publicServiceAdminForm.setAlwaysPublishAll(isAlwaysPublishAll);
    if (publicServiceAdminForm.getPublicSubject() == null) {
      publicServiceAdminForm.setPublicSubject(publicServiceAdminForm.getSubject());
    }
    if (publicServiceAdminForm.getPublicPass() != '1') {
      publicServiceAdminForm.setPublicPass('0');
    }
    if (publicServiceAdminForm.getPublicBody() != '1') {
      publicServiceAdminForm.setPublicBody('0');
    }
    if (publicServiceAdminForm.getPublicWorkflow() != '1') {
      publicServiceAdminForm.setPublicWorkflow('0');
    }

    publicServiceAdminForm.setInnerDialogTitle("发布选项");
    publicServiceAdminForm.setInnerDialog("/cms/publicservice/admin/publishOption.jsp");
    publicServiceAdminForm.getFormActions().addFormAction(-1, "完成", "doAction('publish')", true);
    addReloadAction(publicServiceAdminForm, "取消", request, -1, false);
    return forward;
  }

  public ActionForward executePublishAction(ActionMapping mapping, org.apache.struts.action.ActionForm form, HttpServletRequest request, HttpServletResponse response)
    throws Exception
  {
	  request.setAttribute("publish", Boolean.TRUE);
    return executeSaveAction(mapping, form, request, response, false, null, "发布完成！", null);
  }

	/* (non-Javadoc)
	 * @see com.yuanluesoft.jeaf.workflow.actions.WorkflowAction#saveRecord(com.yuanluesoft.jeaf.form.ActionForm, com.yuanluesoft.jeaf.database.Record, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo)
	 */
	public Record saveRecord(ActionForm form, Record record, String openMode, HttpServletRequest request, HttpServletResponse response, SessionInfo sessionInfo) throws Exception {
		if(Boolean.TRUE.equals(request.getAttribute("publish"))) {
			com.yuanluesoft.cms.publicservice.pojo.PublicService publicService = (com.yuanluesoft.cms.publicservice.pojo.PublicService)record;
			PublicServiceAdminForm publicServiceAdminForm = (PublicServiceAdminForm)form;
			//记录发布人信息
			if(publicService.getPublicPersonId()==0) {
				publicService.setPublicPersonId(sessionInfo.getUserId()); //发布人ID
				publicService.setPublicPersonName(sessionInfo.getUserName()); //发布人
			}
			if(publicServiceAdminForm.isAlwaysPublishAll()) { //总是公布全部信息
				publicService.setPublicBody(publicService.getPublicPass());
				publicService.setPublicWorkflow(publicService.getPublicPass());
			}
		}
		return super.saveRecord(form, record, openMode, request, response, sessionInfo);
	}
}