package com.yuanluesoft.jeaf.action;

import com.yuanluesoft.jeaf.sessionmanage.model.SessionInfo;
import com.yuanluesoft.jeaf.util.Environment;
import com.yuanluesoft.jeaf.util.RequestUtils;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

public class ActionServlet extends org.apache.struts.action.ActionServlet
{
  private String ssoLoginServerName = null;

  public void init()
    throws ServletException
  {
    super.init();
    WebApplicationContext webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());

    Environment.setWebApplicationContext(webApplicationContext);

    Environment.setWebApplicationUrl((String)webApplicationContext.getBean("webApplicationUrl"));
    Environment.setWebApplicationSafeUrl((String)webApplicationContext.getBean("webApplicationSafeUrl"));
    String localUrl = (String)webApplicationContext.getBean("webApplicationLocalUrl");
    Environment.setWebApplicationLocalUrl(localUrl);
    int index = localUrl.indexOf('/', localUrl.indexOf("://") + 3);
    Environment.setContextPath(index == -1 ? "" : localUrl.substring(index));

    this.ssoLoginServerName = ((String)webApplicationContext.getBean("webApplicationSafeUrl"));
    if (this.ssoLoginServerName.startsWith("https://")) {
      this.ssoLoginServerName = this.ssoLoginServerName.substring(this.ssoLoginServerName.indexOf(":") + 3);
      index = this.ssoLoginServerName.indexOf('/');
      if (index != -1) {
        this.ssoLoginServerName = this.ssoLoginServerName.substring(0, index);
      }
      this.ssoLoginServerName = this.ssoLoginServerName.toLowerCase();
      if (this.ssoLoginServerName.equals("localhost")) {
        this.ssoLoginServerName = null;
      }
      else {
        String webApplicationUrl = (String)webApplicationContext.getBean("webApplicationUrl");
        if (webApplicationUrl.endsWith(this.ssoLoginServerName))
          this.ssoLoginServerName = null;
      }
    }
    else
    {
      this.ssoLoginServerName = null;
    }
  }

  protected void process(HttpServletRequest request, HttpServletResponse response)
    throws IOException, ServletException
  {
    request.setCharacterEncoding("UTF-8");

    if ((!request.isSecure()) && 
      (this.ssoLoginServerName != null) && 
      (request.getServerName().toLowerCase().equals(this.ssoLoginServerName))) {
      throw new ServletException();
    }
  	SessionInfo sessionInfo = (SessionInfo)request.getSession().getAttribute("SessionInfo");
	if(sessionInfo==null || "anonymous".equalsIgnoreCase(sessionInfo.getLoginName())) { //未登录
	    String querryString = request.getQueryString();
	    if (querryString != null) {
	      querryString = querryString.toLowerCase();
	      if ((querryString.indexOf('<') != -1) || 
	        (querryString.indexOf('>') != -1) || 
	        (querryString.indexOf("%3c") != -1) || 
	        (querryString.indexOf("%3e") != -1) || 
	        (querryString.indexOf("and%20") != -1) || 
	        (querryString.indexOf("or%20") != -1) || 
	        (querryString.indexOf("where%20") != -1) || 
	        (querryString.indexOf("and ") != -1) || 
	        (querryString.indexOf("or ") != -1) || 
	        (querryString.indexOf('\'') != -1) ||
	        (querryString.indexOf('"') != -1) ||
	        (querryString.indexOf("%22") != -1) ||
	        (querryString.indexOf("%27") != -1) ||
	        (querryString.indexOf("where ") != -1) ||
	        (querryString.indexOf("content-transfer-encoding") != -1)
	        ) {
	        System.out.println("Invalid request: " + RequestUtils.getRequestURL(request, true));
	        response.getWriter().write("Invalid request");
	        return;
	      }
	    }
	    
	    if("post".equalsIgnoreCase(request.getMethod())) {
    		//校验参数值
    		Enumeration parameterNames = request.getParameterNames();
    		while(parameterNames.hasMoreElements()) {
    			String name = (String)parameterNames.nextElement();
    			String[] values = request.getParameterValues(name);
    			for(int i=0; i<values.length; i++) {
    				if(values[i]==null) {
    					continue;
    				}
    				if(values[i].matches("(?i).*('|and\\s|or\\s|where\\s" + ("body".equals(name) || "content".equals(name) ? "" : "|<|>") + ").*")) {
    					System.out.println("**********Invalid parameter: " + values[i]);
    					response.getWriter().write("Invalid request");
    			        return;
    				}
    			}
    		}
    	}
    }

    String continuation = request.getParameter("continuation");
    if ((continuation != null) && (!continuation.equals("")) && (!(request instanceof ContinuationRequest))) {
      HttpSession session = request.getSession();
      Map parameters = (Map)session.getAttribute(continuation + ".parameters");
      if (parameters != null) {
        session.removeAttribute(continuation + ".parameters");
        request = new ContinuationRequest(request, parameters);
      }
    }
    super.process(request, response);
  }
}