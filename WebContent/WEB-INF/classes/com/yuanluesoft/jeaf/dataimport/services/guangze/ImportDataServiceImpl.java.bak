package com.yuanluesoft.cms.importdata.services.guangze;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import com.yuanluesoft.cms.articlemanage.pojo.Article;
import com.yuanluesoft.cms.articlemanage.service.ArticleService;
import com.yuanluesoft.cms.complaint.pojo.Complaint;
import com.yuanluesoft.cms.importdata.ImportDataService;
import com.yuanluesoft.cms.infopublic.pojo.PublicDirectory;
import com.yuanluesoft.cms.infopublic.pojo.PublicInfo;
import com.yuanluesoft.cms.infopublic.pojo.PublicInfoPrivilege;
import com.yuanluesoft.cms.infopublic.service.PublicDirectoryService;
import com.yuanluesoft.cms.infopublic.service.PublicInfoService;
import com.yuanluesoft.cms.leadermail.pojo.LeaderMail;
import com.yuanluesoft.cms.messageboard.pojo.MessageBoard;
import com.yuanluesoft.cms.preapproval.pojo.Preapproval;
import com.yuanluesoft.cms.publicservice.pojo.PublicServiceOpinion;
import com.yuanluesoft.cms.publicservice.pojo.PublicServicePrivilege;
import com.yuanluesoft.cms.sitemanage.pojo.SiteResourcePrivilege;
import com.yuanluesoft.cms.sitemanage.pojo.WebDirectory;
import com.yuanluesoft.jeaf.base.exception.ServiceException;
import com.yuanluesoft.jeaf.dao.BaseDAO;
import com.yuanluesoft.jeaf.logger.Logger;
import com.yuanluesoft.jeaf.security.service.RecordControlService;
import com.yuanluesoft.jeaf.util.DateTimeUtils;
import com.yuanluesoft.jeaf.util.StringUtils;
import com.yuanluesoft.jeaf.util.UUIDLongGenerator;

/**
 * 
 * @author yuanluesoft
 *
 */
public class ImportDataServiceImpl implements ImportDataService {
	private BaseDAO baseDAO;
	private String dbFileName;
	private String imageUrl = "http://www.guangze.gov.cn/";
	private ArticleService articleService; //文章服务
	private PublicInfoService publicInfoService; //信息公开服务
	private PublicDirectoryService publicDirectoryService; //信息公开目录服务
	private int maxImport = 100;
	
	/**
	 * 创建连接
	 * @return
	 * @throws ServiceException
	 */
	private Connection createConnection() throws ServiceException {
		String connectionUrl = "jdbc:odbc:Driver={MicroSoft Access Driver (*.mdb)};DBQ=" + dbFileName;
		try {
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			return DriverManager.getConnection(connectionUrl, "", "");
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ServiceException();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#listColumnsNotInNewCms()
	 */
	public List listColumnsNotInNewCms() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT DISTINCT columnName" +
						 " FROM [SELECT (select E_BigClassName from EC_BigClass where EC_BigClass.E_BigClassID=EC_News.E_bigclassid) AS columnName" +
						 " FROM EC_News" +
						 " WHERE (aindex is null or aindex='') And E_bigclassid Not In (57)" +
						 " union " +
						 " SELECT (select E_smallclassName from EC_smallclass where EC_smallclass.E_smallclassID=EC_News.E_smallclassid) AS columnName" +
						 " FROM EC_News" +
						 " WHERE (aindex is null or aindex='') And E_bigclassid Not In (57)" +
						 " ]. AS [%$##@_Alias]" +
						 " WHERE columnName is not null" +
						 " ORDER BY columnName";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			List columnsNotInNewCms = new ArrayList();
			columnsNotInNewCms.add("公告"); //为导入公告增加的栏目
			while(rs.next()) {
				String column = rs.getString("columnName");
				if(baseDAO.findObjectByHql("select WebDirectory.id from WebDirectory WebDirectory where WebDirectory.directoryName='" + column + "'")==null) {
					columnsNotInNewCms.add(column);
				}
			}
			return columnsNotInNewCms;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ServiceException();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importData(java.lang.String, boolean)
	 */
	public void importArticles(String columnMappings, boolean autoCreateColumn) throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		String[] mapping = columnMappings.replaceAll(" ", "").split(",");
		try {
			//导入文章
			String sql = "SELECT Title as subject," +
						 " Content as body," +
						 " Author as creator," +
						 " UpdateTime as issueTime," +
						 " Original as unitName," +
						 " (select E_BigClassName from EC_BigClass where EC_BigClass.E_BigClassID=EC_News.E_bigclassid) as columnLevel1," +
						 " (select E_smallclassName from EC_smallclass where EC_smallclass.E_smallclassID=EC_News.E_smallclassid) as columnLevel2" +
						 " FROM EC_News" +
						 " where (aindex is null or aindex='')" +
						 " and E_bigclassid not in (57)";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			// Iterate through the data in the result set and display it.
			importArticle(rs, mapping);
			rs.close();
			
			//导入公告
			sql = "SELECT title as subject," +
				  " content as body," +
				  " '网管' as creator," +
				  " dateandtime as issueTime," +
				  " '政和县人民政府' as unitName," +
				  " '公告' as columnLevel1," +
				  " '公告' as columnLevel2" +
				  " FROM EC_board";
			rs = stmt.executeQuery(sql);
			importArticle(rs, mapping);
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}

	/**
	 * 从RS导入数据
	 * @param rs
	 * @throws ServiceException
	 */
	private void importArticle(ResultSet rs, String[] mapping) throws ServiceException, SQLException {
		for(int l=0; rs.next() && l<maxImport; l++) {
			try {
				String[] columnName = new String[2];
				columnName[0] = rs.getString("columnLevel1");
				if(columnName[0]==null || columnName[0].equals("")) {
					continue;
				}
				columnName[1] = rs.getString("columnLevel2");
				WebDirectory directory = null;
				for(int i=1; i>=0 && directory==null; i--) {
					if(columnName[i]==null || columnName[i].equals("")) {
						continue;
					}
					//查找栏目映射表,找到匹配的栏目
					for(int j=0; j<mapping.length; j++) {
						if(mapping[j].startsWith(columnName[i] + ">>")) {
							directory = (WebDirectory)baseDAO.findObjectByHql("from WebDirectory WebDirectory where WebDirectory.directoryName='" + mapping[j].substring((columnName[i] + ">>").length()) + "'");
							break;
						}
					}
					if(directory==null) { //直接按栏目名称对应
						//查找对应的栏目
						directory = (WebDirectory)baseDAO.findObjectByHql("from WebDirectory WebDirectory where WebDirectory.directoryName='" + columnName[i] + "'");
					}
				}
				String subject = rs.getString("subject");
				Timestamp issueTime = rs.getTimestamp("issueTime");
				System.out.println("ImportData: read a article, subject is " + subject + ".");
				if(directory==null) {
					continue;
				}
				//检查相同标题和发布时间的记录是否已经存在
				String hql = "from Article Article" + 
							 " where Article.subject='" + subject + "'" +
							 " and Article.issueTime=TIMESTAMP(" + DateTimeUtils.formatTimestamp(issueTime, null) + ")";
				if(baseDAO.findObjectByHql(hql)!=null) {
					continue;
				}
				Article article = new Article();
				article.setId(UUIDLongGenerator.generateId()); //ID
				article.setSubject(subject);
				//article.setSource(rs.getString("source"));
				article.setEditor(rs.getString("creator"));
				article.setIssueTime(issueTime);
				article.setCreated(issueTime);
				article.setIssue('1');
				article.setIssuePersonId(100);
				String body = resetBody(rs.getString("body"));
				article.setBody(body==null ? " " : body);
				article.setUnitName(rs.getString("unitName"));
				article.setOrgName(article.getUnitName());
				articleService.save(article); //保存
				
				//设置所在站点
				articleService.updateSiteResourceSubjections(article, true, "" + directory.getId());

				//创建权限记录
				SiteResourcePrivilege privilege = new SiteResourcePrivilege();
				privilege.setId(UUIDLongGenerator.generateId());
				privilege.setRecordId(article.getId());
				privilege.setVisitorId(0);
				privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
				privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
				baseDAO.saveObject(privilege);
				System.out.println("ImportData: importted.");
			}
			catch(Exception e) {
				Logger.exception(e);
			}
		}
	}
	
	/**
	 * 更新正文
	 * @param content
	 * @return
	 * @throws ServiceException
	 */
	private String resetBody(String content) throws ServiceException {
		if(content==null) {
			return content;
		}
		//替换<?xml.../>和图片路径
		content = content.replaceAll("<\\x3Fxml[^>]+>", "").replaceAll("src=\"/", "src=\"" + imageUrl).replaceAll("href=\"/", "href=\"" + imageUrl);
		
		String[] prefix = {"uploadfile", "jpg", "doc", "rar", "pdf", "images", "down"};
		for(int i=0; i<prefix.length; i++) {
			content = content.replaceAll("src=\"" + prefix[i], "src=\"" + imageUrl + prefix[i]).replaceAll("href=\"" + prefix[i], "href=\"" + imageUrl + prefix[i]);
		}
		return content;// 更新图片路径后的试题内容
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#listPublicInfoDirectoriesNotInNewCms()
	 */
	public List listPublicInfoDirectoriesNotInNewCms() throws ServiceException {
		return null;
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importPublicInfos(java.lang.String, boolean)
	 */
	public void importPublicInfos(String directoryMappings, boolean autoCreateDirectory) throws ServiceException {
		System.out.println("ImportData: import infos.");
		
		//创建县政府信息公开目录,typeId=8
		PublicDirectory publicDirectory = (PublicDirectory)publicDirectoryService.getDirectory(0);
		createPublicDirectory(publicDirectory, 8, 0, false, false, true, false);
		
		//创建部门信息公开目录,typeId in (24,26,36,37,38,39,40)
		publicDirectory = (PublicDirectory)publicDirectoryService.createDirectory(0, "部门信息公开", "main", null, 0, null);
		int[] typeIds = {24,26,36,37,38,39,40};
		for(int i=0; i<typeIds.length; i++) {
			createPublicDirectory(publicDirectory, typeIds[i], 0, false, true, false, false);
		}
		
		//创建乡镇信息公开目录,typeId in (27,28,29,30,31,32,33,34);
		publicDirectory = (PublicDirectory)publicDirectoryService.createDirectory(0, "乡镇信息公开", "main", null, 0, null);
		typeIds = new int[]{27,28,29,30,31,32,33,34};
		for(int i=0; i<typeIds.length; i++) {
			createPublicDirectory(publicDirectory, typeIds[i], 0, true, false, false, false);
		}
		
		//导入信息
		importInfo();
		System.out.println("ImportData: import infos complete.");
	}
	
	/**
	 * 创建信息公开目录
	 * @param parentDirectory
	 * @param typeIds
	 * @param createMainDirectoryByType 按类型创建主目录
	 * @param createMainDirectoryByBigClass 按大分类创建主目录
	 * @param createDirectoryByBigClass 按大分类创建目录
	 * @param createDirectoryBySmallClass 按小分类创建目录
	 * @throws ServiceException
	 */
	private void createPublicDirectory(PublicDirectory parentDirectory, int typeId, int bigClassId, boolean createMainDirectoryByType, boolean createMainDirectoryByBigClass, boolean createDirectoryByBigClass, boolean createDirectoryBySmallClass) throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			stmt = con.createStatement();
			if(createMainDirectoryByType) { //按类型创建主目录
				String sql = "select E_typeName as name from EC_type where EC_type.E_typeID=" + typeId;
				rs = stmt.executeQuery(sql);
				rs.next();
				PublicDirectory publicDirectory = (PublicDirectory)publicDirectoryService.createDirectory(parentDirectory.getId(), rs.getString("name"), "main", "" + typeId, 0, null);
				rs.close();
				//按大分类创建目录
				createPublicDirectory(publicDirectory, typeId, 0, false, false, true, false);
			}
			else if(createDirectoryByBigClass || createMainDirectoryByBigClass) { //按大分类创建目录或主目录
				String sql = "select E_bigClassId as id, E_bigClassName as name from EC_bigClass where EC_bigClass.E_typeID=" + typeId;
				rs = stmt.executeQuery(sql);
				while(rs.next()) {
					bigClassId = rs.getInt("id");
					PublicDirectory publicDirectory = (PublicDirectory)publicDirectoryService.createDirectory(parentDirectory.getId(), rs.getString("name"), (createDirectoryByBigClass ? "info" : "main"), typeId + "_" + bigClassId, 0, null);
					//按小分类创建目录
					createPublicDirectory(publicDirectory, typeId, bigClassId, false, false, false, true);
				}
				rs.close();
			}
			else { //按小分类创建目录或主目录
				String sql = "select E_smallClassId as id, E_smallClassName as name from EC_smallClass where EC_smallClass.E_bigClassID=" + bigClassId;
				rs = stmt.executeQuery(sql);
				while(rs.next()) {
					int smallClassId = rs.getInt("id");
					publicDirectoryService.createDirectory(parentDirectory.getId(), rs.getString("name"), "info", typeId + "_" + bigClassId + "_" + smallClassId, 0, null);
				}
				rs.close();
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/**
	 * 导入信息
	 * @param rs
	 * @throws ServiceException
	 */
	private void importInfo() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT Title as subject," +
						 " Content as body," +
						 " Author as creator," +
						 " UpdateTime as issueTime," +
						 " Original as unitName," +
						 " BeiZhu as mark," +
						 " UpdateTime as generateDate," +
						 " aindex as infoIndex," +
						 " E_typeid as typeId," +
						 " E_bigclassid as bigClassId," +
						 " E_smallclassid as smallClassId" +
						 " FROM EC_News";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			for(int l=0; rs.next() && l<maxImport; l++) {
				try {
					String directoryRemark = "" + rs.getInt("typeId");
					int bigClassId = rs.getInt("bigClassId");
					if(bigClassId>0) {
						directoryRemark += "_" + bigClassId;
					}
					int smallClassId = rs.getInt("smallClassId");
					if(smallClassId>0) {
						directoryRemark += "_" + smallClassId;
					}
					PublicDirectory directory = (PublicDirectory)baseDAO.findObjectByHql("from PublicDirectory PublicDirectory where PublicDirectory.remark='" + directoryRemark + "'");
					String subject = rs.getString("subject");
					System.out.println("ImportData: read a info, subject is " + subject + ".");
					if(directory==null) {
						continue;
					}
					Date generateDate = rs.getDate("generateDate"); //生成日期
					//检查相同标题和生成时间的记录是否已经存在
					String hql = "from PublicInfo PublicInfo" + 
								 " where PublicInfo.subject='" + subject + "'" +
								 (generateDate==null ? "" : " and PublicInfo.generateDate=DATE(" + DateTimeUtils.formatDate(generateDate, null) + ")");
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					
					PublicInfo info = new PublicInfo();
					info.setId(UUIDLongGenerator.generateId()); //ID
					info.setSubject(subject); //标题
					info.setInfoIndex(rs.getString("infoIndex")); //索引号
					info.setInfoFrom(rs.getString("unitName")); //发布机构
					info.setMark(rs.getString("mark")); //文号
					info.setGenerateDate(generateDate); //生成日期
					info.setCreator(rs.getString("creator")); //创建人
					info.setCreatorId(0); //创建人ID
					info.setCreated(rs.getTimestamp("issueTime")); //创建时间
					info.setIssueTime(info.getCreated()); //发布时间
					info.setWorkflowInstanceId(null);
					info.setSummarize(null); //内容概述
					info.setCategory(null); //主题分类
					info.setKeywords(null); //主题词
					info.setIssuePersonId(100);
					info.setIssue('1');
					info.setIssueSite('1');
					info.setIssueSiteIds(null); //同步的网站ID列表
					String body = resetBody(rs.getString("body"));
					info.setBody(body==null ? " " : body);
					info.setOrgId(0); //创建者所在部门ID
					info.setOrgName(info.getInfoFrom()); //创建者所在部门名称
					info.setUnitId(0); //创建者所在单位ID
					info.setUnitName(info.getOrgName()); //创建者所在单位名称
					publicInfoService.save(info); //保存
					
					//创建权限记录
					PublicInfoPrivilege privilege = new PublicInfoPrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(info.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					
					//设置所在目录
					publicInfoService.updateInfoSubjections(info, true, "" + directory.getId());
					
					System.out.println("ImportData: importted.");
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importOtherData()
	 */
	public void importOtherData() throws ServiceException {
		importLeaderMail();
		importComplaint();
		importPreapproval();
		importMessageBoard();
	}
	
	/**
	 * 导入领导信箱
	 * @throws ServiceException
	 */
	private void importLeaderMail() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			//导入领导信箱
			String sql = "SELECT EC_LeadMail.LeadMailID as sn," + //编号
						 " EC_LeadMail.YourName as creator," + //创建人姓名
						 " EC_LeadMail.Email as creatorMail," + //邮箱
						 " EC_LeadMail.TelePhone as creatorTel," + //联系电话
						 " EC_LeadMail.Address as creatorAddress," + //创建人地址
						 " EC_LeadMail.Zip as creatorPostalcode," + //创建人邮编
						 " EC_LeadMail.Topic as subject," + //主题
						 " EC_LeadMail.Content as body," + //正文
						 " EC_LeadMail.ClassID," +
						 " EC_LeadMail.UpdateTime as created," + //创建时间
						 " EC_LeadMail.LeadMailIP as creatorIP," + //创建人IP
						 " EC_LeadMail.ReplyTime as opinionTime," + //办理意见填写时间
						 " EC_LeadMail.ReplyContent as opinionBody" + //办理意见
						 " FROM EC_LeadMail";
			
						 //"select news_password as queryPassword," + //查询密码
						 //" '身份证' as creatorCertificateName," + //创建人证件名称
						 //" news_idcard as creatorIdentityCard," + //创建人身份证/证件号码
						 //" news_mainclass as type," + //类型
						 //" id as remark" + //附注
						 //news_ as workingDay," + //指定工作日
						 //news_ as 
						 //news_ as creatorSex," + //性别
						 //news_ as creatorMobile," + //创建人手机
						 //news_ as creatorFax," + //创建人传真
						 //news_ as creatorUnit," + //创建人所在单位
						 //news_ as creatorJob," + //创建人职业
						 //news_
						 //news_ as isPublic," + //是否允许公开
						 //news_ as remark," + //附注
						 //news_ as publicPass," + //同意公开
						 //news_ as publicBody," + //公开正文
						 //news_ as publicWorkflow," + //公开办理流程
						 //news_ as publicSubject," + //公开的主题
						 //news_ as popedom," + //事件辖区
						 //news_ as area," + //事件地点
						 //news_mainclass as category," + //信件类别
						 //news_ as workingDay," + //指定工作日
						 //news_ as happenTime," + //事件时间
			
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			for(int l=0; rs.next() && l<maxImport; l++) {
				try {
					String subject = rs.getString("subject");
					Timestamp created = rs.getTimestamp("created");
					//检查相同标题和生成时间的记录是否已经存在
					String hql = "from LeaderMail LeaderMail" + 
								 " where LeaderMail.subject='" + subject + "'" +
								 " and LeaderMail.created=TIMESTAMP(" + DateTimeUtils.formatTimestamp(created, null) + ")";
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					LeaderMail mail = new LeaderMail();
					mail.setId(UUIDLongGenerator.generateId()); //ID
					mail.setSn(DateTimeUtils.formatTimestamp(created, "yyyyMMddHHmmdd") + rs.getInt("sn")); //编号
					mail.setCreator(rs.getString("creator")); //创建人姓名
					mail.setCreatorMail(rs.getString("creatorMail")); //邮箱
					mail.setCreatorTel(rs.getString("creatorTel")); //联系电话
					mail.setCreatorAddress(rs.getString("creatorAddress")); //创建人地址
					mail.setCreatorPostalcode(rs.getString("creatorPostalcode")); //创建人邮编
					mail.setSubject(subject); //主题
					mail.setContent(StringUtils.filterHtmlElement(rs.getString("body"))); //正文
					mail.setCreated(created); //创建时间
					mail.setCreatorIP(rs.getString("creatorIP")); //创建人IP
					mail.setIsPublic('1');
					baseDAO.saveObject(mail);
					
					//创建权限记录
					PublicServicePrivilege privilege = new PublicServicePrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(mail.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					
					//保存办理意见
					String opinionBody = rs.getString("opinionBody");
					if(opinionBody!=null && !opinionBody.equals("")) {
						PublicServiceOpinion opinion = new PublicServiceOpinion();
						opinion.setId(UUIDLongGenerator.generateId()); //ID
						opinion.setOpinion(StringUtils.filterHtmlElement(opinionBody));
						opinion.setCreated(rs.getTimestamp("opinionTime"));
						opinion.setMainRecordId(mail.getId());
						opinion.setOpinionType("部门办理");
						opinion.setPersonName("");
						baseDAO.saveObject(opinion);
					}
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/**
	 * 导入投诉建议
	 * @throws ServiceException
	 */
	private void importComplaint() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		String[] types = {"投诉举报", "各抒己见", "发展建议", "百姓生活", "重大建设建议"};
		String[] sql = new String[2];
		sql[0] = "SELECT EC_Complain.ComplainID as sn," + //编号
				 " 0 as type," + //类型
				 " EC_Complain.YourName as creator," + //创建人姓名
				 " EC_Complain.Email as creatorMail," + //邮箱
				 " EC_Complain.TelePhone as creatorTel," + //联系电话
				 " EC_Complain.Address as creatorAddress," + //创建人地址
				 " EC_Complain.Zip as creatorPostalcode," + //创建人邮编
				 " EC_Complain.Topic as subject," + //主题
				 " EC_Complain.Content as body," + //正文
				 " EC_Complain.UpdateTime as created," + //创建时间
				 " EC_Complain.ComplainIP as creatorIP," + //创建人IP
				 " '' as opinionBody" + //办理意见
				 " FROM EC_Complain" +
				 " WHERE EC_Complain.YourName<>''";
		
		sql[1] = "SELECT EC_Opinion.OpinionID as sn," + //编号
				 " EC_Opinion.OpinionClass as type," + //类型
				 " EC_Opinion.YourName as creator," + //创建人姓名
				 " EC_Opinion.Email as creatorMail," + //邮箱
				 " EC_Opinion.TelePhone as creatorTel," + //联系电话
				 " EC_Opinion.Address as creatorAddress," + //创建人地址
				 " EC_Opinion.Zip as creatorPostalcode," + //创建人邮编
				 " EC_Opinion.Topic as subject," + //主题
				 " EC_Opinion.Content as body," + //正文
				 " EC_Opinion.ClassID," +
				 " EC_Opinion.UpdateTime as created," + //创建时间
				 " EC_Opinion.OpinionIP as creatorIP," + //创建人IP
				 " EC_Opinion.ReplyTime as opinionTime," + //办理意见填写时间
				 " EC_Opinion.ReplyContent as opinionBody" + //办理意见
				 " FROM EC_Opinion";
		try {
			stmt = con.createStatement();
			for(int i=0; i<sql.length; i++) {
				rs = stmt.executeQuery(sql[i]);
				for(int l=0; rs.next() && l<maxImport; l++) {
					try {
						String subject = rs.getString("subject");
						Timestamp created = rs.getTimestamp("created");
						//检查相同标题和生成时间的记录是否已经存在
						String hql = "from Complaint Complaint" + 
									 " where Complaint.subject='" + subject + "'" +
									 " and Complaint.created=TIMESTAMP(" + DateTimeUtils.formatTimestamp(created, null) + ")";
						if(baseDAO.findObjectByHql(hql)!=null) {
							continue;
						}
						Complaint complaint = new Complaint();
						complaint.setId(UUIDLongGenerator.generateId()); //ID
						complaint.setSn(DateTimeUtils.formatTimestamp(created, "yyyyMMddHHmmdd") + rs.getInt("sn")); //编号
						complaint.setCreator(rs.getString("creator")); //创建人姓名
						complaint.setCreatorMail(rs.getString("creatorMail")); //邮箱
						complaint.setCreatorTel(rs.getString("creatorTel")); //联系电话
						complaint.setCreatorAddress(rs.getString("creatorAddress")); //创建人地址
						complaint.setCreatorPostalcode(rs.getString("creatorPostalcode")); //创建人邮编
						complaint.setSubject(subject); //主题
						complaint.setContent(StringUtils.filterHtmlElement(rs.getString("body"))); //正文
						complaint.setCreated(created); //创建时间
						complaint.setCreatorIP(rs.getString("creatorIP")); //创建人IP
						complaint.setType(types[rs.getInt("type")]); //投诉类型
						complaint.setIsPublic('1');
						baseDAO.saveObject(complaint);
						
						//创建权限记录
						PublicServicePrivilege privilege = new PublicServicePrivilege();
						privilege.setId(UUIDLongGenerator.generateId());
						privilege.setRecordId(complaint.getId());
						privilege.setVisitorId(0);
						privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
						privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
						baseDAO.saveObject(privilege);
						
						//保存办理意见
						String opinionBody = rs.getString("opinionBody");
						if(opinionBody!=null && !opinionBody.equals("")) {
							PublicServiceOpinion opinion = new PublicServiceOpinion();
							opinion.setId(UUIDLongGenerator.generateId()); //ID
							opinion.setOpinion(StringUtils.filterHtmlElement(opinionBody));
							opinion.setCreated(rs.getTimestamp("opinionTime"));
							opinion.setMainRecordId(complaint.getId());
							opinion.setOpinionType("部门办理");
							opinion.setPersonName("");
							baseDAO.saveObject(opinion);
						}
					}
					catch(Exception e) {
						Logger.exception(e);
					}
				}
				rs.close();
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/**
	 * 导入预审件
	 * @throws ServiceException
	 */
	private void importPreapproval() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT EC_Approve.ApproveID as sn," + //编号
						 " EC_Approve.YourName as creator," + //创建人姓名
						 " EC_Approve.UserName as opinionPersonName," + //办理意见填写人
						 " EC_Approve.Email as creatorMail," + //邮箱
						 " EC_Approve.TelePhone as creatorTel," + //联系电话
						 " EC_Approve.Address as creatorAddress," + //创建人地址
						 " EC_Approve.Zip as creatorPostalcode," + //创建人邮编
						 " EC_Approve.Topic as subject," + //主题
						 " EC_Approve.Content as body," + //正文
						 " EC_Approve.UpdateTime as created," + //创建时间
						 " EC_Approve.ApproveIP as creatorIP," + //创建人IP
						 " EC_Approve.ReplyTime as opinionTime," + //办理意见填写时间
						 " EC_Approve.ReplyContent as opinionBody," + //办理意见
						 " EC_Approve.HaveReply as opinionCreated" +
						 " FROM EC_Approve";
			
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			for(int l=0; rs.next() && l<maxImport; l++) {
				try {
					String subject = rs.getString("subject");
					Timestamp created = rs.getTimestamp("created");
					//检查相同标题和生成时间的记录是否已经存在
					String hql = "from Preapproval Preapproval" + 
								 " where Preapproval.subject='" + subject + "'" +
								 " and Preapproval.created=TIMESTAMP(" + DateTimeUtils.formatTimestamp(created, null) + ")";
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					Preapproval preapproval = new Preapproval();
					preapproval.setId(UUIDLongGenerator.generateId()); //ID
					preapproval.setSn(DateTimeUtils.formatTimestamp(created, "yyyyMMddHHmmdd") + rs.getInt("sn")); //编号
					preapproval.setCreator(rs.getString("creator")); //创建人姓名
					preapproval.setCreatorMail(rs.getString("creatorMail")); //邮箱
					preapproval.setCreatorTel(rs.getString("creatorTel")); //联系电话
					preapproval.setCreatorAddress(rs.getString("creatorAddress")); //创建人地址
					preapproval.setCreatorPostalcode(rs.getString("creatorPostalcode")); //创建人邮编
					preapproval.setSubject(subject); //主题
					preapproval.setContent(StringUtils.filterHtmlElement(rs.getString("body"))); //正文
					preapproval.setCreated(created); //创建时间
					preapproval.setCreatorIP(rs.getString("creatorIP")); //创建人IP
					preapproval.setIsPublic('1');
					baseDAO.saveObject(preapproval);
					
					//创建权限记录
					PublicServicePrivilege privilege = new PublicServicePrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(preapproval.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					
					//保存办理意见
					String opinionBody = rs.getString("opinionBody");
					if(opinionBody!=null && !opinionBody.equals("")) {
						PublicServiceOpinion opinion = new PublicServiceOpinion();
						opinion.setId(UUIDLongGenerator.generateId()); //ID
						opinion.setOpinion(StringUtils.filterHtmlElement(opinionBody));
						opinion.setCreated(rs.getTimestamp("opinionTime"));
						opinion.setMainRecordId(preapproval.getId());
						opinion.setOpinionType("部门办理");
						opinion.setPersonName("");
						baseDAO.saveObject(opinion);
					}
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/**
	 * 导入留言
	 * @throws ServiceException
	 */
	private void importMessageBoard() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT EC_Review.ReViewID as sn," + //编号
						 " EC_Review.NewsID," +
						 " EC_Review.Content as body," + //正文
						 " EC_Review.editor as creatorAddress," + //创建人地址
						 " EC_Review.Author as creator," + //创建人姓名
						 " EC_Review.passed," +
						 " EC_Review.reviewip as creatorIP," + //创建人IP
						 " EC_Review.UpdateTime as created," + //创建时间
						 " EC_Review.Email as creatorMail," + //邮箱
						 " EC_Review.from," +
						 " EC_Review.face," +
						 " EC_Review.homepage," +
						 " EC_Review.shengfen," +
						 " EC_Review.oicq," +
						 " EC_Review.UpdateTime as opinionTime," + //办理意见填写时间
						 " EC_Review.reply as opinionBody," + //办理意见
						 " EC_Review.title" +
						 " FROM EC_Review";
			
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			for(int l=0; rs.next() && l<maxImport; l++) {
				try {
					String body = rs.getString("body");
					body = StringUtils.filterHtmlElement(body);
					String subject = StringUtils.slice(body, 100, "...");
					subject = subject.replace(" ", "").replace("\r", "").replace("\n", "");
					Timestamp created = rs.getTimestamp("created");
					//检查相同标题和生成时间的记录是否已经存在
					String hql = "from MessageBoard MessageBoard" + 
								 " where MessageBoard.subject='" + subject + "'" +
								 " and MessageBoard.created=TIMESTAMP(" + DateTimeUtils.formatTimestamp(created, null) + ")";
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					MessageBoard message = new MessageBoard();
					message.setId(UUIDLongGenerator.generateId()); //ID
					message.setSn(DateTimeUtils.formatTimestamp(created, "yyyyMMddHHmmdd") + rs.getInt("sn")); //编号
					message.setCreator(rs.getString("creator")); //创建人姓名
					message.setCreatorMail(rs.getString("creatorMail")); //邮箱
					//message.setCreatorTel(rs.getString("creatorTel")); //联系电话
					message.setCreatorAddress(rs.getString("creatorAddress")); //创建人地址
					//message.setCreatorPostalcode(rs.getString("creatorPostalcode")); //创建人邮编
					message.setSubject(subject); //主题
					message.setContent(body); //正文
					message.setCreated(created); //创建时间
					message.setCreatorIP(rs.getString("creatorIP")); //创建人IP
					message.setIsPublic('1');
					baseDAO.saveObject(message);
					
					//创建权限记录
					PublicServicePrivilege privilege = new PublicServicePrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(message.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					
					//保存办理意见
					String opinionBody = rs.getString("opinionBody");
					if(opinionBody!=null && !opinionBody.equals("")) {
						PublicServiceOpinion opinion = new PublicServiceOpinion();
						opinion.setId(UUIDLongGenerator.generateId()); //ID
						opinion.setOpinion(StringUtils.filterHtmlElement(opinionBody));
						opinion.setCreated(rs.getTimestamp("opinionTime"));
						opinion.setMainRecordId(message.getId());
						opinion.setOpinionType("部门办理");
						opinion.setPersonName("");
						baseDAO.saveObject(opinion);
					}
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}

	/**
	 * @return the baseDAO
	 */
	public BaseDAO getBaseDAO() {
		return baseDAO;
	}

	/**
	 * @param baseDAO the baseDAO to set
	 */
	public void setBaseDAO(BaseDAO baseDAO) {
		this.baseDAO = baseDAO;
	}

	/**
	 * @return the dbFileName
	 */
	public String getDbFileName() {
		return dbFileName;
	}

	/**
	 * @param dbFileName the dbFileName to set
	 */
	public void setDbFileName(String dbFileName) {
		this.dbFileName = dbFileName;
	}
	/**
	 * @return the imageUrl
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * @param imageUrl the imageUrl to set
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	/**
	 * @return the publicInfoService
	 */
	public PublicInfoService getPublicInfoService() {
		return publicInfoService;
	}

	/**
	 * @param publicInfoService the publicInfoService to set
	 */
	public void setPublicInfoService(PublicInfoService publicInfoService) {
		this.publicInfoService = publicInfoService;
	}

	/**
	 * @return the articleService
	 */
	public ArticleService getArticleService() {
		return articleService;
	}

	/**
	 * @param articleService the articleService to set
	 */
	public void setArticleService(ArticleService articleService) {
		this.articleService = articleService;
	}

	/**
	 * @return the publicDirectoryService
	 */
	public PublicDirectoryService getPublicDirectoryService() {
		return publicDirectoryService;
	}

	/**
	 * @param publicDirectoryService the publicDirectoryService to set
	 */
	public void setPublicDirectoryService(
			PublicDirectoryService publicDirectoryService) {
		this.publicDirectoryService = publicDirectoryService;
	}

	/**
	 * @return the maxImport
	 */
	public int getMaxImport() {
		return maxImport;
	}

	/**
	 * @param maxImport the maxImport to set
	 */
	public void setMaxImport(int maxImport) {
		this.maxImport = maxImport;
	}
}
