package com.yuanluesoft.cms.importdata.services.fzjsj;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.yuanluesoft.cms.articlemanage.pojo.Article;
import com.yuanluesoft.cms.articlemanage.service.ArticleService;
import com.yuanluesoft.cms.infopublic.pojo.PublicDirectory;
import com.yuanluesoft.cms.infopublic.pojo.PublicInfo;
import com.yuanluesoft.cms.infopublic.pojo.PublicInfoPrivilege;
import com.yuanluesoft.cms.infopublic.pojo.PublicInfoSubjection;
import com.yuanluesoft.cms.infopublic.service.PublicInfoService;
import com.yuanluesoft.cms.sitemanage.pojo.SiteResourcePrivilege;
import com.yuanluesoft.cms.sitemanage.pojo.SiteResourceSubjection;
import com.yuanluesoft.cms.sitemanage.pojo.WebDirectory;
import com.yuanluesoft.jeaf.base.exception.ServiceException;
import com.yuanluesoft.jeaf.dao.BaseDAO;
import com.yuanluesoft.jeaf.logger.Logger;
import com.yuanluesoft.jeaf.security.service.RecordControlService;
import com.yuanluesoft.jeaf.util.DateTimeUtils;
import com.yuanluesoft.jeaf.util.UUIDLongGenerator;

/**
 * 
 * @author yuanluesoft
 *
 */
public class ImportDataServiceImpl {
	private BaseDAO baseDAO;
	private String dbFileName = "C:/Documents and Settings/linchuan.KDSOFT-HP/桌面/net235.com.mdb";
	private String imageUrl = "http://www.fzjs.fj.cn/";
	private ArticleService articleService; //文章服务
	private PublicInfoService publicInfoService; //信息公开服务

	/**
	 * 创建连接
	 * @return
	 * @throws ServiceException
	 */
	private Connection createConnection() throws ServiceException {
		String connectionUrl = "jdbc:odbc:Driver={MicroSoft Access Driver (*.mdb)};DBQ=" + dbFileName;
		try {
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			return DriverManager.getConnection(connectionUrl, "", "");
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ServiceException();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#listColumnsNotInNewCms()
	 */
	public List listColumnsNotInNewCms() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "select distinct columnName from (" +
						 "SELECT distinct BigClassName as columnName FROM news" +
						 " UNION SELECT distinct SmallClassName as columnName FROM news" +
						 " UNION SELECT distinct SmallClassName1 as columnName FROM news" +
						 " UNION SELECT distinct SmallClassName2 as columnName FROM news" +
						 ") where columnName is not null and columnName<>''";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			List columnsNotInNewCms = new ArrayList();
			columnsNotInNewCms.add("公告"); //为导入公告增加的栏目
			while(rs.next()) {
				String column = rs.getString("columnName");
				if(baseDAO.findObjectByHql("select WebDirectory.id from WebDirectory WebDirectory where WebDirectory.directoryName='" + column + "'")==null) {
					columnsNotInNewCms.add(column);
				}
			}
			return columnsNotInNewCms;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ServiceException();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importData(java.lang.String, boolean)
	 */
	public void importArticles(String columnMappings, boolean autoCreateColumn) throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		String[] mapping = columnMappings.replaceAll(" ", "").split(",");
		try {
			//导入文章
			String sql = "SELECT title as subject," +
						 " content as body," +
						 " user as creator," +
						 " infotime as issueTime," +
						 " BigClassName as columnLevel1," +
						 " SmallClassName as columnLevel2," +
						 " SmallClassName1 as columnLevel3," +
						 " SmallClassName2 as columnLevel4" +
						 " FROM news";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			// Iterate through the data in the result set and display it.
			importArticle(rs, mapping);
			rs.close();
			
			//导入公告
			sql = "SELECT title as subject," +
				 " content as body," +
				 " '管理员' as creator," +
				 " cdate(time) as issueTime," +
				 " '公告' as columnLevel1," +
				 " '公告' as columnLevel2," +
				 " '公告' as columnLevel3," +
				 " '公告' as columnLevel4" +
				 " FROM affiche";
			rs = stmt.executeQuery(sql);
			importArticle(rs, mapping);
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}

	/**
	 * 从RS导入数据
	 * @param rs
	 * @throws ServiceException
	 */
	private void importArticle(ResultSet rs, String[] mapping) throws ServiceException {
		try {
			while(rs.next()) {
				try {
					String[] columnName = new String[4];
					columnName[0] = rs.getString("columnLevel1");
					if(columnName[0]==null || columnName[0].equals("")) {
						continue;
					}
					columnName[1] = rs.getString("columnLevel2");
					columnName[2] = rs.getString("columnLevel3");
					columnName[3] = rs.getString("columnLevel4");
					WebDirectory directory = null;
					for(int i=3; i>=0 && directory==null; i--) {
						if(columnName[i]==null || columnName[i].equals("")) {
							continue;
						}
						//查找栏目映射表,找到匹配的栏目
						for(int j=0; j<mapping.length; j++) {
							if(mapping[j].startsWith(columnName[i] + ">>")) {
								directory = (WebDirectory)baseDAO.findObjectByHql("from WebDirectory WebDirectory where WebDirectory.directoryname='" + mapping[j].substring((columnName[i] + ">>").length()) + "'");
								break;
							}
						}
						if(directory==null) { //直接按栏目名称对应
							//查找对应的栏目
							directory = (WebDirectory)baseDAO.findObjectByHql("from WebDirectory WebDirectory where WebDirectory.directoryName='" + columnName[i] + "'");
						}
					}
					String subject = rs.getString("subject");
					Timestamp issueTime = rs.getTimestamp("issueTime");
					System.out.println("ImportData: read a article, subject is " + subject + ".");
					if(directory==null) {
						continue;
					}
					//检查相同标题和发布时间的记录是否已经存在
					String hql = "from Article Article" + 
								 " where Article.subject='" + subject + "'" +
								 " and Article.issueTime=TIMESTAMP(" + DateTimeUtils.formatTimestamp(issueTime, null) + ")";
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					Article article = new Article();
					article.setId(UUIDLongGenerator.generateId()); //ID
					//设置所在站点
					SiteResourceSubjection subjection = new SiteResourceSubjection();
					subjection.setId(UUIDLongGenerator.generateId());
					subjection.setResourceId(article.getId());
					subjection.setSiteId(directory.getId());
					Set subjections = new HashSet();
					subjections.add(subjection);
					article.setSubjections(subjections);
					//主题
					article.setSubject(subject);
					article.setEditor(rs.getString("creator"));
					article.setIssueTime(issueTime);
					article.setCreated(issueTime);
					article.setIssue('1');
					article.setIssuePersonId(100);
					article.setBody(resetBody(rs.getString("body")));
					article.setOrgName("福州市建设局");
					article.setUnitName("福州市建设局");
					articleService.save(article); //保存
					//创建权限记录
					SiteResourcePrivilege privilege = new SiteResourcePrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(article.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					System.out.println("ImportData: importted.");
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 更新正文
	 * @param content
	 * @return
	 * @throws ServiceException
	 */
	private String resetBody(String content) throws ServiceException {
		if(content==null) {
			return content;
		}
		//替换<?xml.../>和图片路径
		content = content.replaceAll("<\\x3Fxml[^>]+>", "").replaceAll("src=\"/", "src=\"" + imageUrl).replaceAll("\"/fzjs/uploadfile", "\"" + imageUrl + "fzjs/uploadfile").replaceAll("\"/uploadfile", "\"" + imageUrl + "uploadfile");
		return content;// 更新图片路径后的试题内容
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#listPublicInfoDirectoriesNotInNewCms()
	 */
	public List listPublicInfoDirectoriesNotInNewCms() throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			String sql = "select distinct columnName from (" +
						 "SELECT distinct BigClassName as columnName FROM XXGKML" +
						 " UNION SELECT distinct SmallClassName as columnName FROM XXGKML" +
						 " UNION SELECT distinct SmallClassName1 as columnName FROM XXGKML" +
						 ") where columnName is not null and columnName<>''";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			List columnsNotInNewCms = new ArrayList();
			while(rs.next()) {
				String column = rs.getString("columnName");
				if(baseDAO.findObjectByHql("select PublicDirectory.id from PublicDirectory PublicDirectory where PublicDirectory.name='" + column + "'")==null) {
					columnsNotInNewCms.add(column);
				}
			}
			return columnsNotInNewCms;
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ServiceException();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importPublicInfos(java.lang.String, boolean)
	 */
	public void importPublicInfos(String directoryMappings, boolean autoCreateDirectory) throws ServiceException {
		Connection con = createConnection();
		Statement stmt = null;
		ResultSet rs = null;
		String[] mapping = directoryMappings.replaceAll(" ", "").split(",");
		try {
			String sql = "SELECT SortId as infoIndex," + //索引号
						 " Name as subject," + //标题
						 " Organization as infoFrom," + //发布机构
						 //" Source," //来源
						 " simplified as summarize," + //内容概述
						 " Content as body," + //正文
						 " Time as generateDate," + //生成日期
						 " Remark as mark," + //备注/文号
						 " BigClassName as columnLevel1," +
						 " SmallClassName as columnLevel2," +
						 " SmallClassName1 as columnLevel3" +
						 " FROM XXGKML";
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			importInfo(rs, mapping);
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try { 
				rs.close(); 
			}
			catch(Exception e) {
				
			}
			try { 
				stmt.close(); 
			}
			catch(Exception e) {
				
			}
			try {
				con.close(); 
			}
			catch(Exception e) {
				
			}
		}
	}
	
	/**
	 * 从RS导入数据
	 * @param rs
	 * @throws ServiceException
	 */
	private void importInfo(ResultSet rs, String[] mapping) throws ServiceException {
		try {
			while(rs.next()) {
				try {
					String[] columnName = new String[3];
					columnName[0] = rs.getString("columnLevel1");
					if(columnName[0]==null || columnName[0].equals("")) {
						continue;
					}
					columnName[1] = rs.getString("columnLevel2");
					columnName[2] = rs.getString("columnLevel3");
					PublicDirectory directory = null;
					for(int i=2; i>=0 && directory==null; i--) {
						if(columnName[i]==null || columnName[i].equals("")) {
							continue;
						}
						//查找目录映射表,找到匹配的目录
						for(int j=0; j<mapping.length; j++) {
							if(mapping[j].startsWith(columnName[i] + ">>")) {
								directory = (PublicDirectory)baseDAO.findObjectByHql("from PublicDirectory PublicDirectory where PublicDirectory.name='" + mapping[j].substring((columnName[i] + ">>").length()) + "'");
								break;
							}
						}
						if(directory==null) { //直接按目录名称对应
							//查找对应的目录
							directory = (PublicDirectory)baseDAO.findObjectByHql("from PublicDirectory PublicDirectory where PublicDirectory.name='" + columnName[i] + "'");
						}
					}
					String subject = rs.getString("subject");
					Date generateDate = rs.getDate("generateDate");
					System.out.println("ImportData: read a info, subject is " + subject + ".");
					if(directory==null) {
						continue;
					}
					//检查相同标题和生成时间的记录是否已经存在
					String hql = "from PublicInfo PublicInfo" + 
								 " where PublicInfo.subject='" + subject + "'" +
								 " and PublicInfo.generateDate=DATE(" + DateTimeUtils.formatDate(generateDate, null) + ")";
					if(baseDAO.findObjectByHql(hql)!=null) {
						continue;
					}
					PublicInfo info = new PublicInfo();
					info.setId(UUIDLongGenerator.generateId()); //ID
					//设置所在目录
					PublicInfoSubjection subjection = new PublicInfoSubjection();
					subjection.setId(UUIDLongGenerator.generateId());
					subjection.setInfoId(info.getId());
					subjection.setDirectoryId(directory.getId());
					Set subjections = new HashSet();
					subjections.add(subjection);
					info.setSubjections(subjections);
					//主题
					info.setSubject(subject); //标题
					info.setInfoIndex(rs.getString("infoIndex")); //索引号
					info.setInfoFrom(rs.getString("infoFrom")); //发布机构
					info.setMark(rs.getString("mark")); //文号
					info.setGenerateDate(generateDate); //生成日期
					info.setCreator("管理员"); //创建人
					info.setCreatorId(0); //创建人ID
					info.setCreated(new Timestamp(generateDate.getTime())); //创建时间
					info.setIssueTime(info.getCreated()); //发布时间
					info.setWorkflowInstanceId(null);
					info.setSummarize(rs.getString("summarize")); //内容概述
					info.setCategory(null); //主题分类
					info.setKeywords(null); //主题词
					info.setIssuePersonId(100);
					info.setIssue('1');
					info.setIssueSite('0');
					info.setIssueSiteIds(null); //同步的网站ID列表
					info.setBody(resetBody(rs.getString("body")));
					info.setOrgId(0); //创建者所在部门ID
					info.setOrgName("福州市建设局"); //创建者所在部门名称
					info.setUnitId(0); //创建者所在单位ID
					info.setUnitName("福州市建设局"); //创建者所在单位名称
					publicInfoService.save(info); //保存
					//创建权限记录
					PublicInfoPrivilege privilege = new PublicInfoPrivilege();
					privilege.setId(UUIDLongGenerator.generateId());
					privilege.setRecordId(info.getId());
					privilege.setVisitorId(0);
					privilege.setVisitorType(RecordControlService.VISITOR_TYPE_DEPARTMENT);
					privilege.setAccessLevel(RecordControlService.ACCESS_LEVEL_READONLY);
					baseDAO.saveObject(privilege);
					System.out.println("ImportData: importted.");
				}
				catch(Exception e) {
					Logger.exception(e);
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	/* (non-Javadoc)
	 * @see com.yuanluesoft.cms.importdata.ImportDataService#importOtherData()
	 */
	public void importOtherData() throws ServiceException {
		
	}

	/**
	 * @return the baseDAO
	 */
	public BaseDAO getBaseDAO() {
		return baseDAO;
	}

	/**
	 * @param baseDAO the baseDAO to set
	 */
	public void setBaseDAO(BaseDAO baseDAO) {
		this.baseDAO = baseDAO;
	}

	/**
	 * @return the dbFileName
	 */
	public String getDbFileName() {
		return dbFileName;
	}

	/**
	 * @param dbFileName the dbFileName to set
	 */
	public void setDbFileName(String dbFileName) {
		this.dbFileName = dbFileName;
	}
	/**
	 * @return the imageUrl
	 */
	public String getImageUrl() {
		return imageUrl;
	}

	/**
	 * @param imageUrl the imageUrl to set
	 */
	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	/**
	 * @return the publicInfoService
	 */
	public PublicInfoService getPublicInfoService() {
		return publicInfoService;
	}

	/**
	 * @param publicInfoService the publicInfoService to set
	 */
	public void setPublicInfoService(PublicInfoService publicInfoService) {
		this.publicInfoService = publicInfoService;
	}

	/**
	 * @return the articleService
	 */
	public ArticleService getArticleService() {
		return articleService;
	}

	/**
	 * @param articleService the articleService to set
	 */
	public void setArticleService(ArticleService articleService) {
		this.articleService = articleService;
	}
}
